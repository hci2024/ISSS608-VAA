[
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html",
    "title": "Take-home Exercise 3: Be Weatherwise or Otherwise",
    "section": "",
    "text": "The objective of this exercise is to create an analytics-driven data visualization to validate the claims that daily mean temperatures are projected to increase by 1.4 to 4.6. To achieve this, we will employ techniques of visual interactivity and uncertainty visualization.\nThe historical daily temperature datasets were downloaded from Meteorological Service Singapore website, consisting of daily mean temperatures recorded for January in the year 1983, 1993, 2003, 2013, and 2023 at the Changi weather station."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#overview",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#overview",
    "title": "Take-home Exercise 3: Be Weatherwise or Otherwise",
    "section": "",
    "text": "The objective of this exercise is to create an analytics-driven data visualization to validate the claims that daily mean temperatures are projected to increase by 1.4 to 4.6. To achieve this, we will employ techniques of visual interactivity and uncertainty visualization.\nThe historical daily temperature datasets were downloaded from Meteorological Service Singapore website, consisting of daily mean temperatures recorded for January in the year 1983, 1993, 2003, 2013, and 2023 at the Changi weather station."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#getting-started",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#getting-started",
    "title": "Take-home Exercise 3: Be Weatherwise or Otherwise",
    "section": "2. Getting Started",
    "text": "2. Getting Started\n\n2.1 Installing and loading the required R packages\nIn this exercise, we use p_load() of pacman package to load required R packages. The packages that will be used are:\n\ntidyverse a family of R packages for data science process,\nggstatsplot package to create visual graphics with rich statistical information,\nggiraph for making ‘ggplot’ graphics interactive,\npatchwork for combining multiple ggplot2 graphs into one figure.\n\n\n\nCode\npacman::p_load(tidyverse, ggiraph, ggstatsplot, patchwork)\n\n\n\n\n2.2 Importing the data\n\nImportPreview\n\n\nThe downloaded datasets consist of five separate CSV files. The code chunk below imports all the five files into R environment by using read_csv() function of readr package.\n\ndata_1983 &lt;- read_csv(\"data/DAILYDATA_S24_198301.csv\",locale=locale(encoding=\"latin1\"))\ndata_1993 &lt;- read_csv(\"data/DAILYDATA_S24_199301.csv\",locale=locale(encoding=\"latin1\"))\ndata_2003 &lt;- read_csv(\"data/DAILYDATA_S24_200301.csv\",locale=locale(encoding=\"latin1\"))\ndata_2013 &lt;- read_csv(\"data/DAILYDATA_S24_201301.csv\",locale=locale(encoding=\"latin1\"))\ndata_2023 &lt;- read_csv(\"data/DAILYDATA_S24_202301.csv\",locale=locale(encoding = \"UTF-8\"))\n\nNext, we will merge the data and save the resulting object to an RDS file, which will then be loaded into the working environment.\n\ntemp_data &lt;- bind_rows(data_1983, data_1993, data_2003, data_2013, data_2023)\nwrite_rds(temp_data,\"data/temp_data.rds\")\n\n\ntemp_data &lt;- read_rds(\"data/temp_data.rds\")\n\n\n\n\n\nCode\nhead(temp_data)\n\n\n# A tibble: 6 × 16\n  Station  Year Month   Day `Daily Rainfall Total (mm)` Highest 30 Min Rainfal…¹\n  &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;                       &lt;dbl&gt; &lt;chr&gt;                   \n1 Changi   1983     1     1                         0.3 \"\\u0097\"                \n2 Changi   1983     1     2                         0.4 \"\\u0097\"                \n3 Changi   1983     1     3                         2.9 \"\\u0097\"                \n4 Changi   1983     1     4                         0   \"\\u0097\"                \n5 Changi   1983     1     5                         0   \"\\u0097\"                \n6 Changi   1983     1     6                         0   \"\\u0097\"                \n# ℹ abbreviated name: ¹​`Highest 30 Min Rainfall (mm)`\n# ℹ 10 more variables: `Highest 60 Min Rainfall (mm)` &lt;chr&gt;,\n#   `Highest 120 Min Rainfall (mm)` &lt;chr&gt;, `Mean Temperature (°C)` &lt;dbl&gt;,\n#   `Maximum Temperature (°C)` &lt;dbl&gt;, `Minimum Temperature (°C)` &lt;dbl&gt;,\n#   `Mean Wind Speed (km/h)` &lt;dbl&gt;, `Max Wind Speed (km/h)` &lt;dbl&gt;,\n#   `Highest 30 min Rainfall (mm)` &lt;dbl&gt;, `Highest 60 min Rainfall (mm)` &lt;dbl&gt;,\n#   `Highest 120 min Rainfall (mm)` &lt;dbl&gt;\n\n\n\n\n\n\n\n2.3 Variables Selection\nWe will select our variables of interest from 13 variables and narrow them down to 6 variables. They are: Year, Month, Day, Mean Temperature (°C), Maximum Temperature (°C), Minimum Temperature (°C). Subsequently, we will simplify the variable names for convenience.\n\nCodePreview\n\n\n\n# select variables\nsubset &lt;- temp_data %&gt;%\n  select('Year','Month','Day','Mean Temperature (°C)','Maximum Temperature (°C)',\n         'Minimum Temperature (°C)')\n\n# rename\nsubset &lt;- subset %&gt;%\n  rename('Mean_temp'='Mean Temperature (°C)',\n         'Max_temp'='Maximum Temperature (°C)',\n         'Min_temp'='Minimum Temperature (°C)')\n\n\n\n\n\nCode\nhead(subset)\n\n\n# A tibble: 6 × 6\n   Year Month   Day Mean_temp Max_temp Min_temp\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n1  1983     1     1      26.5     28.7     25.1\n2  1983     1     2      26.8     30.6     24.8\n3  1983     1     3      27       31.3     24.5\n4  1983     1     4      27.3     30.8     25  \n5  1983     1     5      27.1     31.8     23.7\n6  1983     1     6      27.2     32.1     23.7"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#data-visualisation-and-insights",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#data-visualisation-and-insights",
    "title": "Take-home Exercise 3: Be Weatherwise or Otherwise",
    "section": "3. Data Visualisation and Insights",
    "text": "3. Data Visualisation and Insights\n\n3.1 Visualizing the Uncertainty of Historical Temperature\nA boxplot will be generated to visualize the distribution of historical daily mean temperature data for January of each year. Additionally, confidence intervals of the mean temperature by year will be also be plotted. This will establish a baseline for comparison with projected increases.\nFirstly, code chunk below will be used to derive the necessary summary statistics.\n\nmy_sum &lt;- subset %&gt;%\n  group_by(Year) %&gt;%\n  summarise(\n    n=n(),\n    mean=mean(Mean_temp),\n    sd=sd(Mean_temp)\n    ) %&gt;%\n  mutate(se=sd/sqrt(n-1))\n\nNext, the code chunk below will be used to display my_sum tibble data frame in an html table format.\n\nknitr::kable(head(my_sum), format = 'html')\n\n\n\n\nYear\nn\nmean\nsd\nse\n\n\n\n\n1983\n31\n26.45161\n0.6587215\n0.1202655\n\n\n1993\n31\n26.20645\n0.8390214\n0.1531837\n\n\n2003\n31\n26.66129\n0.8179965\n0.1493450\n\n\n2013\n31\n27.04516\n0.9804212\n0.1789996\n\n\n2023\n31\n26.53548\n1.2755517\n0.2328828\n\n\n\n\n\n\n\nNow we are ready to create the visualization.\n\n\nCode\np1 &lt;- ggplot(my_sum) + \n            geom_errorbar_interactive(aes(x=factor(Year),\n                              ymin=mean-1.96*se, \n                              ymax=mean+1.96*se), \n                              data_id = my_sum$Year,\n                              width=0.2, \n                              colour=\"black\", \n                              alpha=0.9, \n                              size=0.5) +\n                   geom_point_interactive(aes(x=factor(Year), \n                                  y=mean, \n                                  data_id = Year,\n                                  tooltip = paste(\"Year:\", `Year`, \n                                  \"&lt;br&gt;Mean Temperature:\", round(mean, digits = 2),\n                                  \"&lt;br&gt;95% CI:[\", \n                                  round((mean-1.96*se), digits = 2), \",\",\n                                  round((mean+1.96*se), digits = 2),\"]\")),\n                     stat=\"identity\", \n                     color=\"red\", \n                     size = 1.5, \n                     alpha=1) + \n             \n                   ylab(\"Mean Temperature (°C)\") + \n                  coord_cartesian(ylim = c(23.5, 29.5)) +\n                   theme_minimal() + \n                   theme(axis.text.x = element_text(\n                     angle = 45, vjust = 0.5, hjust=1),\n                     axis.title.x = element_blank()) +\n                   ggtitle(\"95% Confidence Interval of Mean\\n Temperature by Year\")\n\np2 &lt;- ggplot(subset,\n             aes(x = factor(Year), y = Mean_temp)) +\n  geom_boxplot_interactive(\n    aes(tooltip = paste(\"Year: \", Year,\n                        \"&lt;br&gt;Median Temperature:\", round(median(Mean_temp), digits = 2)),\n        data_id = Year),\n        fill = \"grey\") +\n  coord_cartesian(ylim = c(23.5, 29.5)) +\n    labs(title = \"Daily Mean Temperature Distribution\\n for January\", x = \"Year\") +\n  theme_minimal() +\ntheme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1),\n  axis.title.x = element_blank(),\n  axis.title.y = element_blank())\n\n\ngirafe(                                  \n  code = print(p1 + p2),                             \n  width_svg = 8,                         \n  height_svg = 8*0.618,\n  options = list(\n         opts_hover(css = \"stroke-width:1\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         ))     \n\n\n\n\n\n\n\n\n3.2 Visualizing the Future Temperature Projection\nFirst, a linear regression model will be used to analyze the trend and predict future temperatures.\n\nCodeSummary\n\n\n\n# Fit linear regression model\nmodel &lt;- lm(mean ~ Year, my_sum)\n\n\n\n\n\nCode\nsummary(model)\n\n\n\nCall:\nlm(formula = mean ~ Year, data = my_sum)\n\nResiduals:\n       1        2        3        4        5 \n 0.07290 -0.27290  0.08129  0.36452 -0.24581 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)\n(Intercept)  6.420774  19.340654   0.332    0.762\nYear         0.010065   0.009656   1.042    0.374\n\nResidual standard error: 0.3053 on 3 degrees of freedom\nMultiple R-squared:  0.2659,    Adjusted R-squared:  0.02117 \nF-statistic: 1.086 on 1 and 3 DF,  p-value: 0.3739\n\n\n\n\n\nNext, we will predict the temperatures with 95% confidence interval for future 10 years, and combine the predicted data with the historical data.\n\n\nCode\n# Predict temperatures for future years\nfuture_years &lt;- c(2033, 2043, 2053, 2063, 2073, 2083, 2093, 2103, 2113, 2123)\npredicted_temperatures &lt;- predict(model, newdata = data.frame(Year = future_years),interval = \"confidence\")\n\n# Combine historical and predicted data\nhist_temperatures &lt;- cbind(my_sum$mean, my_sum$mean-1.96*my_sum$se, my_sum$mean+1.96*my_sum$se )\nall_years &lt;- c(my_sum$Year, future_years)\nall_temperatures &lt;- rbind(hist_temperatures, predicted_temperatures)\nall_data &lt;- data.frame(Year = all_years, all_temperatures)\n\nknitr::kable(all_data,row.names = FALSE, format = 'html')\n\n\n\n\n\nYear\nfit\nlwr\nupr\n\n\n\n\n1983\n26.45161\n26.21589\n26.68733\n\n\n1993\n26.20645\n25.90621\n26.50669\n\n\n2003\n26.66129\n26.36857\n26.95401\n\n\n2013\n27.04516\n26.69432\n27.39600\n\n\n2023\n26.53548\n26.07903\n26.99193\n\n\n2033\n26.88194\n25.86279\n27.90108\n\n\n2043\n26.98258\n25.67888\n28.28628\n\n\n2053\n27.08323\n25.48653\n28.67992\n\n\n2063\n27.18387\n25.28964\n29.07810\n\n\n2073\n27.28452\n25.09007\n29.47897\n\n\n2083\n27.38516\n24.88877\n29.88155\n\n\n2093\n27.48581\n24.68631\n30.28530\n\n\n2103\n27.58645\n24.48303\n30.68987\n\n\n2113\n27.68710\n24.27915\n31.09505\n\n\n2123\n27.78774\n24.07481\n31.50067\n\n\n\n\n\n\n\nNow we are ready to create the visualization.\n\n\nCode\np&lt;-ggplot(all_data, aes(x = Year, y = fit)) +\n  geom_errorbar(\n    aes(ymin=lwr, \n        ymax=upr), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point_interactive(aes(y=all_data$fit), \n           tooltip = paste(\"Year:\", all_data$Year, \n                           \"&lt;br&gt;Mean Temperature:\", round(all_data$fit, digits = 2),\n                           \"&lt;br&gt;95% CI:[\", \n                            round(all_data$lwr, digits = 2), \",\",\n                            round(all_data$upr, digits = 2),\"]\"),\n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  geom_smooth(method = \"lm\", se=FALSE) + \n  labs(title = \"Historical and Predicted Mean Temperatures\",\n       x = \"Year\",\n       y = \"Mean Temperature (°C)\") +\n  theme_minimal()\n\ngirafe(                                \n  ggobj = p,                       \n  width_svg = 8,                         \n  height_svg = 8*0.618,\n  options = list(\n         opts_hover(css = \"stroke-width:1\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         ))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#conclusion",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#conclusion",
    "title": "Take-home Exercise 3: Be Weatherwise or Otherwise",
    "section": "4. Conclusion",
    "text": "4. Conclusion\nThe data presented in the above plots clearly demonstrate a consistent increase in temperature over the past five decades. The upward trend of mean temperatures for January is evident, showing a rise from 26.45°C in 1983 to 27.05°C in 2013, indicating an average annual increase of approximately 0.15°C.\nDrawing from this observed pattern, predictive models project that by 2123, the monthly mean temperature is anticipated to reach 27.79°C, with an upper boundary of 31.5°C. This suggests a projected temperature escalation of roughly 1.25°C to 4.51°C over the next decade, slightly below the previously claimed range of 1.4°C to 4.6°C."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home Exercise 1: Creating data visualisation beyond default",
    "section": "",
    "text": "OECD education director Andreas Schleicher shared in a BBC article that “Singapore managed to achieve excellence without wide differences between children from wealthy and disadvantaged families.” (2016) Furthermore, several Singapore’s Minister for Education also started an “every school a good school” slogan. The general public, however, strongly belief that there are still disparities that exist, especially between the elite schools and neighborhood school, between students from families with higher socioeconomic status and those with relatively lower socioeconomic status and immigration and non-immigration families.\n\n\n\nThe 2022 Programme for International Student Assessment (PISA) data was released on December 5, 2022. PISA global education survey every three years to assess the education systems worldwide through testing 15 year old students in the subjects of mathematics, reading, and science.\nIn this take-home exercise, we are required to use appropriate Exploratory Data Analysis (EDA) methods and ggplot2 functions to reveal:\n\nthe distribution of Singapore students’ performance in mathematics, reading, and science, and\nthe relationship between these performances with schools, gender and socioeconomic status of the students."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#overview",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#overview",
    "title": "Take-home Exercise 1: Creating data visualisation beyond default",
    "section": "",
    "text": "OECD education director Andreas Schleicher shared in a BBC article that “Singapore managed to achieve excellence without wide differences between children from wealthy and disadvantaged families.” (2016) Furthermore, several Singapore’s Minister for Education also started an “every school a good school” slogan. The general public, however, strongly belief that there are still disparities that exist, especially between the elite schools and neighborhood school, between students from families with higher socioeconomic status and those with relatively lower socioeconomic status and immigration and non-immigration families.\n\n\n\nThe 2022 Programme for International Student Assessment (PISA) data was released on December 5, 2022. PISA global education survey every three years to assess the education systems worldwide through testing 15 year old students in the subjects of mathematics, reading, and science.\nIn this take-home exercise, we are required to use appropriate Exploratory Data Analysis (EDA) methods and ggplot2 functions to reveal:\n\nthe distribution of Singapore students’ performance in mathematics, reading, and science, and\nthe relationship between these performances with schools, gender and socioeconomic status of the students."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#getting-started",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#getting-started",
    "title": "Take-home Exercise 1: Creating data visualisation beyond default",
    "section": "2 Getting Started",
    "text": "2 Getting Started\n\n2.1 Installing and loading the required R packages\nIn this exercise, we use p_load() of pacman package to load required R packages. The packages that will be used are:\n\ntidyverse\nhaven\nggthemes\nggdist\n\n\n\nCode\npacman::p_load(ggthemes, ggdist, haven, tidyverse)\n\n\n\n\n2.2 Importing the data\nThe PISA 2022 database contains the full set of responses from individual students, school principals and parents. These data files are in SAS and SPSS formats. For the purpose of this exercise, we will use the Student questionnaire data file only.\n\nImportPreview\n\n\nThe code chunk below uses read_sas() of haven to import PISA data into R environment.\n\nstu_qqq &lt;- read_sas(\"data/cy08msp_stu_qqq.sas7bdat\")\n\nSince we will only focus on Singapore data, the code chunk below uses filter() of dplyr (one of the tidyverse package) to filter where country (CNT) is Singapore (SGP).\n\nstu_qqq_SG &lt;- stu_qqq %&gt;%\nfilter(CNT == \"SGP\")\n\nWe will then save the object to an RDS file and load the file into the working environment.\n\nwrite_rds(stu_qqq_SG,\"data/stu_qqq_SG.rds\")\n\n\nstu_qqq_SG &lt;- read_rds(\"data/stu_qqq_SG.rds\")\n\n\n\n\n\n\n\nNote\n\n\n\n\nRDS(R Data Serialization) is a binary format that allows you to save and load R objects efficiently.\nwrite_rds() is a function to save an R object in a file using the RDS file format.\nread_rds() is a function used to read an R object from a file in the RDS format.\n\n\n\n\n\n\n\nCode\nhead(stu_qqq_SG)\n\n\n# A tibble: 6 × 1,279\n  CNT   CNTRYID CNTSCHID CNTSTUID CYC   NatCen STRATUM SUBNATIO REGION  OECD\n  &lt;chr&gt;   &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;\n1 SGP       702 70200052 70200001 08MS  070200 SGP01   7020000   70200     0\n2 SGP       702 70200134 70200002 08MS  070200 SGP01   7020000   70200     0\n3 SGP       702 70200112 70200003 08MS  070200 SGP01   7020000   70200     0\n4 SGP       702 70200004 70200004 08MS  070200 SGP01   7020000   70200     0\n5 SGP       702 70200152 70200005 08MS  070200 SGP01   7020000   70200     0\n6 SGP       702 70200043 70200006 08MS  070200 SGP01   7020000   70200     0\n# ℹ 1,269 more variables: ADMINMODE &lt;dbl&gt;, LANGTEST_QQQ &lt;dbl&gt;,\n#   LANGTEST_COG &lt;dbl&gt;, LANGTEST_PAQ &lt;dbl&gt;, Option_CT &lt;dbl&gt;, Option_FL &lt;dbl&gt;,\n#   Option_ICTQ &lt;dbl&gt;, Option_WBQ &lt;dbl&gt;, Option_PQ &lt;dbl&gt;, Option_TQ &lt;dbl&gt;,\n#   Option_UH &lt;dbl&gt;, BOOKID &lt;dbl&gt;, ST001D01T &lt;dbl&gt;, ST003D02T &lt;dbl&gt;,\n#   ST003D03T &lt;dbl&gt;, ST004D01T &lt;dbl&gt;, ST250Q01JA &lt;dbl&gt;, ST250Q02JA &lt;dbl&gt;,\n#   ST250Q03JA &lt;dbl&gt;, ST250Q04JA &lt;dbl&gt;, ST250Q05JA &lt;dbl&gt;, ST250D06JA &lt;chr&gt;,\n#   ST250D07JA &lt;chr&gt;, ST251Q01JA &lt;dbl&gt;, ST251Q02JA &lt;dbl&gt;, ST251Q03JA &lt;dbl&gt;, …"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-wrangling",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-wrangling",
    "title": "Take-home Exercise 1: Creating data visualisation beyond default",
    "section": "3 Data Wrangling",
    "text": "3 Data Wrangling\n\n3.1 Subset Selection\nWe will select our variables of interest from 1279 variables and narrow them down to 6 variables. They are:\n\nCNTSCHID: Intl. School ID\nST004D01T: Student Gender\nESCS: Index of economic, social and cultural status\nPV1MATH: Plausible Value 1 in Mathematics\nPV1READ: Plausible Value 1 in Reading\nPV1SCIE: Plausible Value 1 in Science\n\n\n\n\n\n\n\nNote\n\n\n\n\nThe data dictionary of description to variables can be found in Codebook, and Technical Report, under Student Questionnaire derived variables section.\nWorking with Plausible Values: According to the PISA website, plausible values should not be averaged at the student level. Although it is highly recommended to use all the available plausible values in order to improve the accuracy of the estimates, during the exploratory phase of the data, statistical analyses can be based on a single plausible value as PISA analysts indicate that using one or five plausible values in a large sample does not really make a substantial difference(ref).\n\n\n\nWe will then further rename them to more descriptive names.\n\nCodePreview the subset\n\n\n\nstu_qqq_SG_subset &lt;- stu_qqq_SG %&gt;%\n  select('CNTSCHID','ST004D01T','ESCS','PV1MATH','PV1READ','PV1SCIE')\n       \nstu_qqq_SG_subset &lt;- stu_qqq_SG_subset %&gt;%\n  rename('School_ID'='CNTSCHID',\n         'Gender'='ST004D01T',\n         'Socioeconomic_status'='ESCS',\n         'Math'='PV1MATH',\n         'Reading'='PV1READ',\n         'Science'='PV1SCIE')\n\n\n\n\n\n# A tibble: 6 × 6\n  School_ID Gender Socioeconomic_status  Math Reading Science\n      &lt;dbl&gt;  &lt;dbl&gt;                &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;\n1  70200052      1               0.184   639.    676.    711.\n2  70200134      2               0.826   697.    626.    671.\n3  70200112      2              -1.04    694.    620.    666.\n4  70200004      2              -0.961   427.    381.    340.\n5  70200152      1               0.0856  436.    448.    456.\n6  70200043      1               0.127   570.    469.    475.\n\n\n\n\n\n\n\n3.2 Data Cleaning\nWe will check for missing values or duplicates and remove those rows, if there are any.\n\nCheck for missing valuesCheck for duplicatesRemove\n\n\n\nsum(is.na(stu_qqq_SG_subset))\n\n[1] 47\n\n\n\n\n\nsum(duplicated(stu_qqq_SG_subset) | duplicated(stu_qqq_SG_subset, fromLast = TRUE))\n\n[1] 0\n\n\n\n\nThe code chunk below is to remove the missing values, since there are 47 missing valuse found.\n\nsubset_clean &lt;- na.omit(stu_qqq_SG_subset)\n\n\n\n\n\n\n3.3 Data Type Conversion\nLooking at the structure of the prepared subset, we find that all variable are cast as &lt;dbl&gt;, which refers to the data type “double.” It is a numeric variable with double-precision floating-point numbers.\n\nPreview the subsetStructure\n\n\n\n\nCode\nhead(subset_clean)\n\n\n# A tibble: 6 × 6\n  School_ID Gender Socioeconomic_status  Math Reading Science\n      &lt;dbl&gt;  &lt;dbl&gt;                &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;\n1  70200052      1               0.184   639.    676.    711.\n2  70200134      2               0.826   697.    626.    671.\n3  70200112      2              -1.04    694.    620.    666.\n4  70200004      2              -0.961   427.    381.    340.\n5  70200152      1               0.0856  436.    448.    456.\n6  70200043      1               0.127   570.    469.    475.\n\n\n\n\n\n\nCode\nstr(subset_clean)\n\n\ntibble [6,559 × 6] (S3: tbl_df/tbl/data.frame)\n $ School_ID           : num [1:6559] 70200052 70200134 70200112 70200004 70200152 ...\n  ..- attr(*, \"label\")= chr \"Intl. School ID\"\n $ Gender              : num [1:6559] 1 2 2 2 1 1 2 2 1 2 ...\n  ..- attr(*, \"label\")= chr \"Student (Standardized) Gender\"\n $ Socioeconomic_status: num [1:6559] 0.1836 0.8261 -1.0357 -0.9606 0.0856 ...\n  ..- attr(*, \"label\")= chr \"Index of economic, social and cultural status\"\n $ Math                : num [1:6559] 639 697 694 427 436 ...\n  ..- attr(*, \"label\")= chr \"Plausible Value 1 in Mathematics\"\n $ Reading             : num [1:6559] 676 626 620 381 448 ...\n  ..- attr(*, \"label\")= chr \"Plausible Value 1 in Reading\"\n $ Science             : num [1:6559] 711 671 666 340 456 ...\n  ..- attr(*, \"label\")= chr \"Plausible Value 1 in Science\"\n - attr(*, \"na.action\")= 'omit' Named int [1:47] 73 181 242 442 812 1152 1340 1535 1580 1647 ...\n  ..- attr(*, \"names\")= chr [1:47] \"73\" \"181\" \"242\" \"442\" ...\n\n\n\n\n\nWe need to convert some variables into appropriate data types, they are:\n\nSchool_ID will be cast as character using as.character(). character represents text or strings.\nGender will be cast as factor using as.factor(). factor represents categorical data. It is used when the data has a limited number of distinct values.\n\n\nCodePreviewStructure\n\n\n\nsubset_clean$School_ID &lt;- as.character(subset_clean$School_ID)\n\nsubset_clean$Gender &lt;- as.factor(subset_clean$Gender)\n\n\n\n\n\nCode\nhead(subset_clean)\n\n\n# A tibble: 6 × 6\n  School_ID Gender Socioeconomic_status  Math Reading Science\n  &lt;chr&gt;     &lt;fct&gt;                 &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;\n1 70200052  1                    0.184   639.    676.    711.\n2 70200134  2                    0.826   697.    626.    671.\n3 70200112  2                   -1.04    694.    620.    666.\n4 70200004  2                   -0.961   427.    381.    340.\n5 70200152  1                    0.0856  436.    448.    456.\n6 70200043  1                    0.127   570.    469.    475.\n\n\n\n\n\n\nCode\nstr(subset_clean)\n\n\ntibble [6,559 × 6] (S3: tbl_df/tbl/data.frame)\n $ School_ID           : chr [1:6559] \"70200052\" \"70200134\" \"70200112\" \"70200004\" ...\n $ Gender              : Factor w/ 2 levels \"1\",\"2\": 1 2 2 2 1 1 2 2 1 2 ...\n $ Socioeconomic_status: num [1:6559] 0.1836 0.8261 -1.0357 -0.9606 0.0856 ...\n  ..- attr(*, \"label\")= chr \"Index of economic, social and cultural status\"\n $ Math                : num [1:6559] 639 697 694 427 436 ...\n  ..- attr(*, \"label\")= chr \"Plausible Value 1 in Mathematics\"\n $ Reading             : num [1:6559] 676 626 620 381 448 ...\n  ..- attr(*, \"label\")= chr \"Plausible Value 1 in Reading\"\n $ Science             : num [1:6559] 711 671 666 340 456 ...\n  ..- attr(*, \"label\")= chr \"Plausible Value 1 in Science\"\n - attr(*, \"na.action\")= 'omit' Named int [1:47] 73 181 242 442 812 1152 1340 1535 1580 1647 ...\n  ..- attr(*, \"names\")= chr [1:47] \"73\" \"181\" \"242\" \"442\" ...\n\n\n\n\n\n\n\n3.4 Variable Recoding\nThe recode() function of dplyr will be used to replace the values for variable “Gender”, where\n1 -&gt; Female and\n2 -&gt; Male.\n\nCodePreview\n\n\n\nsubset_clean &lt;- subset_clean %&gt;%\n  mutate(Gender=(recode(Gender, '1'=\"Female\", \n                        '2'=\"Male\")))\n\n\n\n\n\nCode\nhead(subset_clean)\n\n\n# A tibble: 6 × 6\n  School_ID Gender Socioeconomic_status  Math Reading Science\n  &lt;chr&gt;     &lt;fct&gt;                 &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;\n1 70200052  Female               0.184   639.    676.    711.\n2 70200134  Male                 0.826   697.    626.    671.\n3 70200112  Male                -1.04    694.    620.    666.\n4 70200004  Male                -0.961   427.    381.    340.\n5 70200152  Female               0.0856  436.    448.    456.\n6 70200043  Female               0.127   570.    469.    475."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#exploratory-data-analysis",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#exploratory-data-analysis",
    "title": "Take-home Exercise 1: Creating data visualisation beyond default",
    "section": "4 Exploratory Data Analysis",
    "text": "4 Exploratory Data Analysis\n\n4.1 The distribution of Singapore students’ performance in mathematics, reading, and science\nWe will plot a Half-Eye graph by using stat_halfeye() of ggdist package to show the distribution of performance in different subjects. Next, we will add the second geometry layer using geom_boxplot(), and add mean values by using stat_summary().\nBefore that, the gather() function of tidyverse will be used to reshape the data from wide to long format.\n\nCodePreview\n\n\n\ndata_long &lt;- gather(data=subset_clean, key = \"subject\", value = \"score\", 4:6)\n\n\n\n\n\nCode\nhead(data_long)\n\n\n# A tibble: 6 × 5\n  School_ID Gender Socioeconomic_status subject score\n  &lt;chr&gt;     &lt;fct&gt;                 &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;\n1 70200052  Female               0.184  Math     639.\n2 70200134  Male                 0.826  Math     697.\n3 70200112  Male                -1.04   Math     694.\n4 70200004  Male                -0.961  Math     427.\n5 70200152  Female               0.0856 Math     436.\n6 70200043  Female               0.127  Math     570.\n\n\n\n\n\n\n\nCode\nggplot(data_long, \n       aes(x = score, \n           y = subject)) +\n\n  stat_halfeye(aes(fill=subject),\n               adjust = .5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA,\n               alpha = .75) +\n  scale_fill_brewer()+\n  geom_boxplot(width = .20,\n               outlier.shape = NA,\n               alpha = 0.25) + \n  stat_summary(geom = \"point\",       \n               fun.y = \"mean\",         \n               colour =\"red\",        \n               size=2) +\n  labs(x = \"Score\", \n       y = NULL, \n       title = \"The distribution of performance in different subjects\")+\n  theme_stata() +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\n\nSymmetrical curves seem to mirror Normal distributions across subjects.\nThe range and distribution shape of scores in the three subjects seem very similar.\nMathematics exhibits the highest median and average score compared to the other two subjects.\n\n\n\n\n\n4.2 The relationship between the performances with gender, schools and socioeconomic status\n\n4.2.1 Gender\n\n\nCode\nggplot(data_long, \n       aes(y = score, x= Gender, fill = Gender)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun.y = \"mean\",         \n               colour =\"red\",        \n               size=2)+\n  scale_fill_brewer()+\n  facet_wrap(~ subject) +\n  labs(y = \"Score\", \n      title = \"The relationship between the performances and gender\")+\n  theme_stata()  +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\n\nOverall, gender seems not affecting much on the performances across subjects, as there’s no obvious difference in score in the above boxplots.\nMale students demonstrated slightly better performance than female students in mathematics, while female students performed slightly better than male students in reading. However, in science, the difference between males and females are minimal.\n\n\n\n\n\n4.2.2 School\nFirstly, let’s look at the overall count of schools present in our dataset.\n\nlength(unique(data_long$School_ID))\n\n[1] 164\n\n\nWith the aim of investigating the correlation between schools and student performance, we will compute the mean score of students for each school.\n\nCodePreview\n\n\n\ndata_sch &lt;- data_long %&gt;%\n  group_by(School_ID,subject) %&gt;%\n  summarize(mean_score = mean(score))\n\n\n\n\n\nCode\nhead(data_sch)\n\n\n# A tibble: 6 × 3\n# Groups:   School_ID [2]\n  School_ID subject mean_score\n  &lt;chr&gt;     &lt;chr&gt;        &lt;dbl&gt;\n1 70200001  Math          728.\n2 70200001  Reading       648.\n3 70200001  Science       697.\n4 70200002  Math          532.\n5 70200002  Reading       501.\n6 70200002  Science       536.\n\n\n\n\n\n\n\nCode\nggplot(data_sch, \n       aes(x = mean_score, \n           y = subject)) +\n\n  stat_halfeye(aes(fill=subject),\n               adjust = .5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA,\n               alpha = .75) +\n  scale_fill_brewer()+\n  geom_boxplot(width = .20,\n               alpha = 0.25,\n               outlier.colour = \"black\", \n               outlier.size = 3) + \n  stat_summary(geom = \"point\",       \n               fun.y = \"mean\",         \n               colour =\"red\",        \n               size=2) +\n  labs(x = \"Score\", \n       y = NULL, \n       title = \"The distribution of average school performance in different subjects\")+\n  theme_stata() +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\n\nThe above plot illustrates that the variances among all study subjects were relatively consistent.\nBy comparing individual schools to the Singapore average, there is considerable variability in the performance levels among different schools in Singapore.\nThere are noticeable outliers for each subject, suggesting that certain schools deviate significantly from the national average, either surpassing or falling below.\n\n\n\n\n\n4.2.3 Socioeconomic status\nFirstly, we will check the summary statistics and plot a histogram to understand the target variable “socioeconomic_status”\n\nSummary StatisticsDistribution\n\n\n\n\nCode\nsummary(data_long$Socioeconomic_status)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n-3.5488 -0.2330  0.4817  0.2904  0.9036  3.2780 \n\n\n\n\n\n\nCode\nggplot(data=data_long, \n       aes(x = Socioeconomic_status)) +\n  geom_histogram(color=\"grey25\",\n                 fill=\"grey90\")\n\n\n\n\n\n\n\n\nGiven the abundance of data points and the “socioeconomic_status” range (-3.5488 to 3.2780), we will categorize them into four distinct groups before proceeding to create the visualization. They are: “&lt; -2”, “-2 - 0”, “0 - 2”, “&gt; 2”. This categorization aims to enhance clarity and facilitate a more focused and meaningful presentation of the information.\n\nCodePreview\n\n\n\nbreaks &lt;- c(-4, -2, 0, 2, 4)\nlabels &lt;- c(\"&lt; -2\", \"-2 - 0\", \"0 - 2\", \"&gt; 2\")\nbins &lt;- cut(data_long$Socioeconomic_status, breaks = breaks, labels = labels, include.lowest = TRUE)\n\ndata_long &lt;- data_long %&gt;%\n  mutate(Socioeconomic = bins)\n\n\n\n\n\nCode\nhead(data_long)\n\n\n# A tibble: 6 × 6\n  School_ID Gender Socioeconomic_status subject score Socioeconomic\n  &lt;chr&gt;     &lt;fct&gt;                 &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;fct&gt;        \n1 70200052  Female               0.184  Math     639. 0 - 2        \n2 70200134  Male                 0.826  Math     697. 0 - 2        \n3 70200112  Male                -1.04   Math     694. -2 - 0       \n4 70200004  Male                -0.961  Math     427. -2 - 0       \n5 70200152  Female               0.0856 Math     436. 0 - 2        \n6 70200043  Female               0.127  Math     570. 0 - 2        \n\n\n\n\n\n\n\nCode\nggplot(data_long, \n       aes(y = score, x= Socioeconomic, fill = Socioeconomic)) +\n  geom_boxplot() +\n  scale_fill_brewer()+\n  facet_wrap(~ subject) +\n  labs(y = \"Score\", \n      title = \"The relationship between the performances and socioeconomic status\")+\n  theme_stata()  +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\n\nStudents with higher socioeconomic score tend to have better performances across all three subjects.\nThere’s not much difference on performances for students with positive socioeconomic score, no matter above 2 or not."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#conclusion",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#conclusion",
    "title": "Take-home Exercise 1: Creating data visualisation beyond default",
    "section": "5 Conclusion",
    "text": "5 Conclusion\nThrough this exercise, we illustrated the utility of interactive and statistical plots in comprehending and analyzing PISA data.\nIn Section 4, we employed diverse visualizations to delve into the data, unraveling its distribution, relationships, and patterns. We compared the distributions of the three different subjects - mathematics, reading, and science, and revealed that the shape of the scores in the three subjects seem very similar. Additionally, our exploration also revealed correlations such as higher socioeconomic status score being linked to better performances across different subjects."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html",
    "title": "In-Class Exercise 3",
    "section": "",
    "text": "Superstore Sales and Profit Report\nhttps://public.tableau.com/app/profile/hui.ci5829/viz/In-class_Ex03-SuperstoreSalesandProfitReport_17063378291410/Dashboard1?publish=yes\nSuperstore Sales and Profit Story\nhttps://public.tableau.com/app/profile/hui.ci5829/viz/In-class_Ex03-SuperstoreSalesandProfitStory_17063378781000/SuperstoreSalesandProfitStory?publish=yes\nScatterplot: Maths vs English\nhttps://public.tableau.com/app/profile/hui.ci5829/viz/In-class_Ex03-ScatterplotMathsvsEnglish/Dashboard1?publish=yes"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html",
    "title": "11 Visualising Uncertainty",
    "section": "",
    "text": "Visualising uncertainty is relatively new in statistical graphics. In this chapter, we will gain hands-on experience on creating statistical graphics for visualising uncertainty. By the end of this chapter we will be able:\n\nto plot statistics error bars by using ggplot2,\nto plot interactive error bars by combining ggplot2, plotly and DT,\nto create advanced by using ggdist, and\nto create hypothetical outcome plots (HOPs) by using ungeviz package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#learning-outcome",
    "title": "11 Visualising Uncertainty",
    "section": "",
    "text": "Visualising uncertainty is relatively new in statistical graphics. In this chapter, we will gain hands-on experience on creating statistical graphics for visualising uncertainty. By the end of this chapter we will be able:\n\nto plot statistics error bars by using ggplot2,\nto plot interactive error bars by combining ggplot2, plotly and DT,\nto create advanced by using ggdist, and\nto create hypothetical outcome plots (HOPs) by using ungeviz package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#getting-started",
    "title": "11 Visualising Uncertainty",
    "section": "11.2 Getting Started",
    "text": "11.2 Getting Started\n\n11.2.1 Installing and loading the packages\nFor the purpose of this exercise, the following R packages will be used, they are:\n\ntidyverse, a family of R packages for data science process,\nplotly for creating interactive plot,\ngganimate for creating animation plot,\nDT for displaying interactive html table,\ncrosstalk for for implementing cross-widget interactions (currently, linked brushing and filtering), and\nggdist for visualising distribution and uncertainty.\n\n\ndevtools::install_github(\"wilkelab/ungeviz\")\n\n\npacman::p_load(ungeviz, plotly, crosstalk,\n               DT, ggdist, ggridges,\n               colorspace, gganimate, tidyverse)\n\n\n\n11.2.2 Data import\nFor the purpose of this exercise, Exam_data.csv will be used.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#visualizing-the-uncertainty-of-point-estimates-ggplot2-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#visualizing-the-uncertainty-of-point-estimates-ggplot2-methods",
    "title": "11 Visualising Uncertainty",
    "section": "11.3 Visualizing the uncertainty of point estimates: ggplot2 methods",
    "text": "11.3 Visualizing the uncertainty of point estimates: ggplot2 methods\nA point estimate is a single number, such as a mean. Uncertainty, on the other hand, is expressed as standard error, confidence interval, or credible interval.\n\n\n\n\n\n\nImportant\n\n\n\n\nDon’t confuse the uncertainty of a point estimate with the variation in the sample\n\n\n\nIn this section, we will learn how to plot error bars of maths scores by race by using data provided in exam tibble data frame.\nFirstly, code chunk below will be used to derive the necessary summary statistics.\n\nmy_sum &lt;- exam %&gt;%\n  group_by(RACE) %&gt;%\n  summarise(\n    n=n(),\n    mean=mean(MATHS),\n    sd=sd(MATHS)\n    ) %&gt;%\n  mutate(se=sd/sqrt(n-1))\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\ngroup_by() of dplyr package is used to group the observation by RACE,\nsummarise() is used to compute the count of observations, mean, standard deviation\nmutate() is used to derive standard error of Maths by RACE, and\nthe output is save as a tibble data table called my_sum.\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nFor the mathematical explanation, please refer to Slide 20 of Lesson 4.\n\n\nNext, the code chunk below will be used to display my_sum tibble data frame in an html table format.\n\nknitr::kable(head(my_sum), format = 'html')\n\n\n\n\nRACE\nn\nmean\nsd\nse\n\n\n\n\nChinese\n193\n76.50777\n15.69040\n1.132357\n\n\nIndian\n12\n60.66667\n23.35237\n7.041005\n\n\nMalay\n108\n57.44444\n21.13478\n2.043177\n\n\nOthers\n9\n69.66667\n10.72381\n3.791438\n\n\n\n\n\n\n\n\n11.3.1 Plotting standard error bars of point estimates\nNow we are ready to plot the standard error bars of mean maths score by race as shown below.\n\n\nCode\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean maths score by rac\")\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nThe error bars are computed by using the formula mean+/-se.\nFor geom_point(), it is important to indicate stat=“identity”.\n\n\n\n\n\n11.3.2 Plotting confidence interval of point estimates\nInstead of plotting the standard error bar of point estimates, we can also plot the confidence intervals of mean maths score by race.\n\n\nCode\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE, -mean), \n        ymin=mean-1.96*se, \n        ymax=mean+1.96*se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(x = \"Maths score\",\n       title = \"95% confidence interval of mean maths score by race\")\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nThe confidence intervals are computed by using the formula mean+/-1.96*se.\nThe error bars is sorted by using the average maths scores.\nlabs() argument of ggplot2 is used to change the x-axis label.\n\n\n\n\n\n11.3.3 Visualizing the uncertainty of point estimates with interactive error bars\nIn this section, we will learn how to plot interactive error bars for the 99% confidence interval of mean maths score by race as shown in the figure below.\n\n\nCode\nshared_df = SharedData$new(my_sum)\n\nbscols(widths = c(4,8),\n       ggplotly((ggplot(shared_df) +\n                   geom_errorbar(aes(\n                     x=reorder(RACE, -mean),\n                     ymin=mean-2.58*se, \n                     ymax=mean+2.58*se), \n                     width=0.2, \n                     colour=\"black\", \n                     alpha=0.9, \n                     size=0.5) +\n                   geom_point(aes(\n                     x=RACE, \n                     y=mean, \n                     text = paste(\"Race:\", `RACE`, \n                                  \"&lt;br&gt;N:\", `n`,\n                                  \"&lt;br&gt;Avg. Scores:\", round(mean, digits = 2),\n                                  \"&lt;br&gt;95% CI:[\", \n                                  round((mean-2.58*se), digits = 2), \",\",\n                                  round((mean+2.58*se), digits = 2),\"]\")),\n                     stat=\"identity\", \n                     color=\"red\", \n                     size = 1.5, \n                     alpha=1) + \n                   xlab(\"Race\") + \n                   ylab(\"Average Scores\") + \n                   theme_minimal() + \n                   theme(axis.text.x = element_text(\n                     angle = 45, vjust = 0.5, hjust=1)) +\n                   ggtitle(\"99% Confidence interval of average /&lt;br&gt;maths scores by race\")), \n                tooltip = \"text\"), \n       DT::datatable(shared_df, \n                     rownames = FALSE, \n                     class=\"compact\", \n                     width=\"100%\", \n                     options = list(pageLength = 10,\n                                    scrollX=T), \n                     colnames = c(\"No. of pupils\", \n                                  \"Avg Scores\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %&gt;%\n         formatRound(columns=c('mean', 'sd', 'se'),\n                     digits=2))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#visualising-uncertainty-ggdist-package",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#visualising-uncertainty-ggdist-package",
    "title": "11 Visualising Uncertainty",
    "section": "11.4 Visualising Uncertainty: ggdist package",
    "text": "11.4 Visualising Uncertainty: ggdist package\n\nggdist is an R package that provides a flexible set of ggplot2 geoms and stats designed especially for visualising distributions and uncertainty.\nIt is designed for both frequentist and Bayesian uncertainty visualization, taking the view that uncertainty visualization can be unified through the perspective of distribution visualization:\n\nfor frequentist models, one visualises confidence distributions or bootstrap distributions (see vignette(“freq-uncertainty-vis”));\nfor Bayesian models, one visualises probability distributions (see the tidybayes package, which builds on top of ggdist).\n\n\n\n11.4.1 Visualizing the uncertainty of point estimates: ggdist methods\nIn the code chunk below, stat_pointinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval() +\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\nThis function comes with many arguments. For example, in the code chunk below the following arguments are used:\n\n.width = 0.95\n.point = median\n.interval = qi\n\n\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(.width = 0.95,\n  .point = median,\n  .interval = qi) +\n  labs(\n    title = \"Visualising confidence intervals of median math score\",\n    subtitle = \"Median Point + Multiple-interval plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html",
    "title": "9 Visualising Distribution",
    "section": "",
    "text": "Visualising distribution is not new in statistical analysis. In chapter 1 we have shared with you some of the popular statistical graphics methods for visualising distribution are histogram, probability density curve (pdf), boxplot, notch plot and violin plot and how they can be created by using ggplot2. In this chapter, we are going to share with you two relatively new statistical graphic methods for visualising distribution, namely ridgeline plot and raincloud plot by using ggplot2 and its extensions.\n\n\nFor the purpose of this exercise, the following R packages will be used, they are:\ntidyverse, a family of R packages for data science process, ggridges, a ggplot2 extension specially designed for plotting ridgeline plots, and ggdist for visualising distribution and uncertainty.\n\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)\n\n\n\n\nFor the purpose of this exercise, Exam_data.csv will be used.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#learning-outcome",
    "title": "9 Visualising Distribution",
    "section": "",
    "text": "Visualising distribution is not new in statistical analysis. In chapter 1 we have shared with you some of the popular statistical graphics methods for visualising distribution are histogram, probability density curve (pdf), boxplot, notch plot and violin plot and how they can be created by using ggplot2. In this chapter, we are going to share with you two relatively new statistical graphic methods for visualising distribution, namely ridgeline plot and raincloud plot by using ggplot2 and its extensions.\n\n\nFor the purpose of this exercise, the following R packages will be used, they are:\ntidyverse, a family of R packages for data science process, ggridges, a ggplot2 extension specially designed for plotting ridgeline plots, and ggdist for visualising distribution and uncertainty.\n\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)\n\n\n\n\nFor the purpose of this exercise, Exam_data.csv will be used.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#visualising-distribution-with-ridgeline-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#visualising-distribution-with-ridgeline-plot",
    "title": "9 Visualising Distribution",
    "section": "9.3 Visualising Distribution with Ridgeline Plot",
    "text": "9.3 Visualising Distribution with Ridgeline Plot\nRidgeline plot (sometimes called Joyplot) is a data visualisation technique for revealing the distribution of a numeric value for several groups. Distribution can be represented using histograms or density plots, all aligned to the same horizontal scale and presented with a slight overlap.\n\n\n\n\n\n\nNote\n\n\n\n\nRidgeline plots make sense when the number of group to represent is medium to high, and thus a classic window separation would take to much space. Indeed, the fact that groups overlap each other allows to use space more efficiently. If you have less than 5 groups, dealing with other distribution plots is probably better.\nIt works well when there is a clear pattern in the result, like if there is an obvious ranking in groups. Otherwise group will tend to overlap each other, leading to a messy plot not providing any insight.\n\n\n\n\n9.3.1 Plotting ridgeline graph: ggridges method\nThere are several ways to plot ridgeline plot with R. In this section, you will learn how to plot ridgeline plot by using ggridges package.\nggridges package provides two main geom to plot gridgeline plots, they are: geom_ridgeline() and geom_density_ridges(). The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using ridgelines.\nThe ridgeline plot below is plotted by using geom_density_ridges().\n\n\nCode\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n9.3.2 Varying fill colors along the x axis\nSometimes we would like to have the area under a ridgeline not filled with a single solid color but rather with colors that vary in some form along the x axis. This effect can be achieved by using either geom_ridgeline_gradient() or geom_density_ridges_gradient(). Both geoms work just like geom_ridgeline() and geom_density_ridges(), except that they allow for varying fill colors. However, they do not allow for alpha transparency in the fill. For technical reasons, we can have changing fill colors or transparency but not both.\n\n\nCode\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"English Grades\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n9.3.3 Mapping the probabilities directly onto colour\nBeside providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called stat_density_ridges() that replaces stat_density() of ggplot2.\nFigure below is plotted by mapping the probabilities calculated by using stat(ecdf) which represent the empirical cumulative density function for the distribution of English score.\n\n\nCode\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nIt is important include the argument calc_ecdf = TRUE in stat_density_ridges().\n\n\n\n\n9.3.4 Ridgeline plots with quantile lines\nBy using geom_density_ridges_gradient(), we can colour the ridgeline plot by quantile, via the calculated stat(quantile) aesthetic as shown in the figure below.\n\n\nCode\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\n\n\n\n\nInstead of using number to define the quantiles, we can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot as shown in the figure below.\n\n\nCode\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#visualising-distribution-with-raincloud-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#visualising-distribution-with-raincloud-plot",
    "title": "9 Visualising Distribution",
    "section": "9.4 Visualising Distribution with Raincloud Plot",
    "text": "9.4 Visualising Distribution with Raincloud Plot\nRaincloud Plot is a data visualisation techniques that produces a half-density to a distribution plot. It gets the name because the density plot is in the shape of a “raincloud”. The raincloud (half-density) plot enhances the traditional box-plot by highlighting multiple modalities (an indicator that groups may exist). The boxplot does not show where densities are clustered, but the raincloud plot does!\nIn this section, you will learn how to create a raincloud plot to visualise the distribution of English score by race. It will be created by using functions provided by ggdist and ggplot2 packages.\n\n9.4.1 Plotting a Half Eye graph\nFirst, we will plot a Half-Eye graph by using stat_halfeye() of ggdist package.\nThis produces a Half Eye visualization, which is contains a half-density and a slab-interval.\n\n\nCode\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\nWe remove the slab interval by setting .width = 0 and point_colour = NA.\n\n\n\n\n9.4.2 Adding the boxplot with geom_boxplot()\nNext, we will add the second geometry layer using geom_boxplot() of ggplot2. This produces a narrow boxplot. We reduce the width and adjust the opacity.\n\n\nCode\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)\n\n\n\n\n\n\n\n9.4.3 Adding the Dot Plots with stat_dots()\nNext, we will add the third geometry layer using stat_dots() of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = “left” to indicate we want it on the left-hand side.\n\n\nCode\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)\n\n\n\n\n\n\n\n9.4.4 Finishing touch\nLastly, coord_flip() of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. At the same time, theme_economist() of ggthemes package is used to give the raincloud chart a professional publishing standard look.\n\n\nCode\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html",
    "title": "3 Programming Interactive Data Visualisation with R",
    "section": "",
    "text": "In this hands-on exercise, we will learn how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#learning-outcome",
    "title": "3 Programming Interactive Data Visualisation with R",
    "section": "",
    "text": "In this hands-on exercise, we will learn how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#getting-started",
    "title": "3 Programming Interactive Data Visualisation with R",
    "section": "3.2 Getting Started",
    "text": "3.2 Getting Started\nFirst, write a code chunk to check, install and launch the following R packages:\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure.\n\nThe code chunk below will be used to accomplish the task.\n\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#importing-data",
    "title": "3 Programming Interactive Data Visualisation with R",
    "section": "3.3 Importing Data",
    "text": "3.3 Importing Data\nIn this section, Exam_data.csv provided will be used. Using read_csv() of readr package, import Exam_data.csv into R.\nThe code chunk below read_csv() of readr package is used to import Exam_data.csv data file into R and save it as an tibble data frame called exam_data.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactive-data-visualisation---ggiraph-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactive-data-visualisation---ggiraph-methods",
    "title": "3 Programming Interactive Data Visualisation with R",
    "section": "3.4 Interactive Data Visualisation - ggiraph methods",
    "text": "3.4 Interactive Data Visualisation - ggiraph methods\nggiraph is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.\nInteractive is made with ggplot geometries that can understand three arguments:\n\nTooltip: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.\nOnclick: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.\nData_id: a column of data-sets that contain an id to be associated with elements.\n\nIf it used within a shiny application, elements associated with an id (data_id) can be selected and manipulated on client and server sides. Refer to this article for more detail explanation.\n\n3.4.1 Tooltip effect with tooltip aesthetic\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts. First, an ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nNotice that two steps are involved. First, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph. Then, girafe() will be used to generate an svg object to be displayed on an html page.\n\n\nInteractivity: By hovering the mouse pointer on an data point of interest, the student’s ID will be displayed.\n\n\n3.4.2 Displaying multiple information on tooltip\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below.\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe first three lines of codes in the code chunk create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 7.\n\n\nInteractivity: By hovering the mouse pointer on an data point of interest, the student’s ID and Class will be displayed.\n\n\n3.4.3 Customising Tooltip style\nCode chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\n\ntooltip_css &lt;- \"background-color:white; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nNotice that the background colour of the tooltip is white and the font colour is black and bold.\nRefer to Customizing girafe objects to learn more about how to customise ggiraph objects.\n\n\n\n\n3.4.4 Displaying statistics on tooltip\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\n3.4.5 Hover effect with data_id aesthetic\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS,\n        tooltip = exam_data$ID),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)\n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\n\n\n\n\nNote\n\n\n\nNote that the default value of the hover css is hover_css = “fill:orange;”.\n\n\n\n\n3.4.6 Styling hover effect\nIn the code chunk below, css codes are used to change the highlighting effect.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)\n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\n\n\n\n\nNote\n\n\n\nNote: Different from previous example, in this example the ccs customisation request are encoded directly.\n\n\n\n\n3.4.7 Combining tooltip and hover effect\nThere are time that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)\n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.\n\n\n3.4.8 Click effect with onclick\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code chunk below shown an example of onclick.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)\n\n\n\n\n\nInteractivity: Web document link with a data object will be displayed on the web browser upon mouse click.\n\n\n\n\n\n\nNote\n\n\n\nNote that click actions must be a string column in the dataset containing valid javascript instructions.\n\n\n\n\n3.4.9 Coordinated Multiple Views with ggiraph\nCoordinated multiple views methods has been implemented in the data visualisation below.\n\n\nCode\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       )\n\n\n\n\n\n\nNotice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactive-data-visualisation---plotly-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactive-data-visualisation---plotly-methods",
    "title": "3 Programming Interactive Data Visualisation with R",
    "section": "3.5 Interactive Data Visualisation - plotly methods!",
    "text": "3.5 Interactive Data Visualisation - plotly methods!\nPlotly’s R graphing library create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the grammar of graphics. Different from other plotly platform, plot.R is free and open source.\n\nThere are two ways to create interactive graph by using plotly, they are:\n\nby using plot_ly(), and\nby using ggplotly()\n\n\n3.5.1 Creating an interactive scatter plot: plot_ly() method\nThe tabset below shows an example a basic interactive plot created by using plot_ly().\n\n\nCode\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\n\n\n\n\n\n\n\n3.5.2 Working with visual variable: plot_ly() method\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\n\n\n\n\nInteractive: Click on the colour symbol at the legend.\n\n\n3.5.3 Creating an interactive scatter plot: ggplotly() method\nThe code chunk below plots an interactive scatter plot by using ggplotly().\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nNotice that the only extra line you need to include in the code chunk is ggplotly().\n\n\n\n\n3.5.4 Coordinated Multiple Views with plotly\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\n\n\nCode\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\n\n\nInteractive: Click on a data point of one of the scatterplot and see how the corresponding point on the other scatterplot is selected.\n\n\n\n\n\n\nThing to learn from the code chunk:\n\n\n\n\nhighlight_key() simply creates an object of class crosstalk::SharedData.\nVisit this link to learn more about crosstalk"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactive-data-visualisation---crosstalk-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactive-data-visualisation---crosstalk-methods",
    "title": "3 Programming Interactive Data Visualisation with R",
    "section": "3.6 Interactive Data Visualisation - crosstalk methods!",
    "text": "3.6 Interactive Data Visualisation - crosstalk methods!\nCrosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\n\n3.6.1 Interactive Data Table: DT package\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\n\n3.6.2 Linked brushing: crosstalk method\nCode chunk below is used to implement the coordinated brushing.\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThing to learn from the code chunk:\n\n\n\n\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#reference",
    "title": "3 Programming Interactive Data Visualisation with R",
    "section": "3.7 Reference",
    "text": "3.7 Reference\n\n3.7.1 ggiraph\nThis link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to interactive graphs for Swiss Olympians - the solo specialists.\n\n\n\n3.7.2 plotly for R\n\nGetting Started with Plotly in R\nA collection of plotly R graphs are available via this link.\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "1 A Layered Grammar of Graphics: ggplot2 methods",
    "section": "",
    "text": "In this chapter, we will learn the basic principles and essential components of ggplot2. At the same time, we will gain hands-on experience on using these components to plot statistical graphics based on the principle of Layered Grammar of Graphics. By then end of this chapter we will be able to apply the essential graphical elements provided by ggplot2 to create elegant and yet functional statistical graphics."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#learning-outcome",
    "title": "1 A Layered Grammar of Graphics: ggplot2 methods",
    "section": "",
    "text": "In this chapter, we will learn the basic principles and essential components of ggplot2. At the same time, we will gain hands-on experience on using these components to plot statistical graphics based on the principle of Layered Grammar of Graphics. By then end of this chapter we will be able to apply the essential graphical elements provided by ggplot2 to create elegant and yet functional statistical graphics."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#getting-started",
    "title": "1 A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.2 Getting Started",
    "text": "1.2 Getting Started\n\n1.2.1 Installing and loading the required libraries\nThe code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)\n\n\n\n1.2.2 Importing the data\n\nImportViewOverview of the summary statistics\n\n\n\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package.\nreadr is one of the tidyverse package.\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n\n\nCode\nhead(exam_data,10)\n\n\n# A tibble: 10 × 7\n   ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n   &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n 1 Student321 3I    Male   Malay        21     9      15\n 2 Student305 3I    Female Malay        24    22      16\n 3 Student289 3H    Male   Chinese      26    16      16\n 4 Student227 3F    Male   Chinese      27    77      31\n 5 Student318 3I    Male   Malay        27    11      25\n 6 Student306 3I    Female Malay        31    16      16\n 7 Student313 3I    Male   Chinese      31    21      25\n 8 Student316 3I    Male   Malay        31    18      27\n 9 Student312 3I    Male   Malay        33    19      15\n10 Student297 3H    Male   Indian       34    49      37\n\n\n\n\n\n\nCode\nsummary(exam_data)\n\n\n      ID               CLASS              GENDER              RACE          \n Length:322         Length:322         Length:322         Length:322        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n    ENGLISH          MATHS          SCIENCE     \n Min.   :21.00   Min.   : 9.00   Min.   :15.00  \n 1st Qu.:59.00   1st Qu.:58.00   1st Qu.:49.25  \n Median :70.00   Median :74.00   Median :65.00  \n Mean   :67.18   Mean   :69.33   Mean   :61.16  \n 3rd Qu.:78.00   3rd Qu.:85.00   3rd Qu.:74.75  \n Max.   :96.00   Max.   :99.00   Max.   :96.00  \n\n\n\nYear end examination grades of a cohort of primary 3 students from a local school.\nThere are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\n\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#introducing-ggplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#introducing-ggplot",
    "title": "1 A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.3 Introducing ggplot",
    "text": "1.3 Introducing ggplot\nggplot2 is an R package for declaratively creating data-driven graphics based on The Grammar of Graphics. It is also part of the tidyverse family specially designed for visual exploration and communication.\n\n1.3.1 R Graphics VS ggplot\nFirst, let us compare how R Graphics, the core graphical functions of Base R and ggplot plot a simple histogram.\n\nR Graphicsggplot2\n\n\n\n\nCode\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\n\n\nCode\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\nAs you can see that the code chunk is relatively simple if R Graphics is used. However, ggplot2 is recommended because\n“The transferrable skills from ggplot2 are not the idiosyncracies of plotting syntax, but a powerful way of thinking about visualisation, as a way of mapping between variables and the visual properties of geometric objects that you can perceive.”\n- pointed out by Hadley Wickham"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#grammar-of-graphics",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#grammar-of-graphics",
    "title": "1 A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.4 Grammar of Graphics",
    "text": "1.4 Grammar of Graphics\nGrammar of Graphics is a general scheme for data visualization which breaks up graphs into semantic components such as scales and layers. It was introduced by Leland Wilkinson (1999) Grammar of Graphics, Springer.\nGrammar of Graphics defines the rules of structuring mathematical and aesthetic elements into a meaningful graph.\nThere are two principles in Grammar of Graphics, they are:\n\nGraphics = distinct layers of grammatical elements\nMeaningful plots through aesthetic mapping\n\n\n1.4.1 A Layered Grammar of Graphics\nggplot2 is an implementation of Leland Wilkinson’s Grammar of Graphics. Figure below shows the seven grammars of ggplot2.\n\nA short description of each building block are as follows:\n\nData: The dataset being plotted.\nAesthetics take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.\nGeometrics: The visual elements used for our data, such as point, bar or line.\nFacets split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).\nStatistics, statiscal transformations that summarise data (e.g. mean, confidence intervals).\nCoordinate systems define the plane on which data are mapped on the graphic.\nThemes modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-data",
    "title": "1 A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.5 Essential Grammatical Elements in ggplot2: data",
    "text": "1.5 Essential Grammatical Elements in ggplot2: data\nLet us call the ggplot() function using the code chunk on the right.\n\nggplot(data=exam_data)\n\n\n\n\n\nA blank canvas appears.\nggplot() initializes a ggplot object.\nThe data argument defines the dataset to be used for plotting.\nIf the dataset is not already a data.frame, it will be converted to one by fortify()."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-aesthetic-mappings",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-aesthetic-mappings",
    "title": "1 A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.6 Essential Grammatical Elements in ggplot2: Aesthetic mappings",
    "text": "1.6 Essential Grammatical Elements in ggplot2: Aesthetic mappings\nThe aesthetic mappings take attributes of the data and and use them to influence visual characteristics, such as position, colour, size, shape, or transparency. Each visual characteristic can thus encode an aspect of the data and be used to convey information.\nAll aesthetics of a plot are specified in the aes() function call.\nCode chunk below adds the aesthetic element into the plot.\n\nggplot(data=exam_data, \n       aes(x= MATHS))\n\n\n\n\n\nggplot includes the x-axis and the axis’s label."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-geom",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-geom",
    "title": "1 A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7 Essential Grammatical Elements in ggplot2: geom",
    "text": "1.7 Essential Grammatical Elements in ggplot2: geom\nGeometric objects are the actual marks we put on a plot. Examples include:\n\ngeom_point for drawing individual points (e.g., a scatter plot)\ngeom_line for drawing lines (e.g., for a line charts)\ngeom_smooth for drawing smoothed lines (e.g., for simple trends or approximations)\ngeom_bar for drawing bars (e.g., for bar charts)\ngeom_histogram for drawing binned values (e.g. a histogram)\ngeom_polygon for drawing arbitrary shapes\ngeom_map for drawing polygons in the shape of a map! (You can access the data to use for these maps by using the map_data() function).\n\nA plot must have at least one geom; there is no upper limit. You can add a geom to a plot using the + operator.\nFor complete list, please refer to here.\n\n\n1.7.1 Geometric Objects: geom_bar\nPlotting a simple bar chart by using geom_bar()\n\n\nCode\nggplot(data=exam_data,\n       aes(x = RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n1.7.2 Geometric Objects: geom_bar\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.\nPlotting a dot plot by using geom_dotplot()\n\n\nCode\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe y scale is not very useful, in fact it is very misleading.\n\n\nThe code chunk below performs the following two steps to address the above problem:\n\nscale_y_continuous() is used to turn off the y-axis, and\nbinwidth argument is used to change the binwidth to 2.5.\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)\n\n\n\n\n\n\n1.7.3 Geometric Objects: geom_histogram()\nPlotting a simple histogram by using geom_histogram()\n\n\nCode\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote that the default bin is 30.\n\n\n\n\n1.7.4 Modifying a geometric object by changing geom()\nIn the code chunk below,\n\nbins argument is used to change the number of bins to 20,\nfill argument is used to shade the histogram with light blue color, and\ncolor argument is used to change the outline colour of the bars in black\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")  \n\n\n\n\n\n\n1.7.5 Modifying a geometric object by changing aes()\nThe code chunk below changes the interior color of the histogram (i.e. fill) by using sub-group of aesthetic().\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis approach can be used to color, fill and alpha of the geometric.\n\n\n\n\n1.7.6 Geometric Objects: geom-density()\ngeom-density() computes and plots kernel density estimate, which is a smoothed version of the histogram.\nIt is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\nThe code below plots the distribution of Maths scores in a kernel density estimate plot.\nPlotting the distribution of Maths scores in a kernel density estimate plot:\n\n\nCode\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()\n\n\n\n\n\nPlotting two kernel density lines by using color or fill arguments of aes():\n\n\nCode\nggplot(data=exam_data, \n       aes(x = MATHS, \n           fill = GENDER,\n           color = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n\n1.7.7 Geometric Objects: geom_boxplot\ngeom_boxplot() displays continuous value list. It visualizes five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\nPlotting boxplots by using geom_boxplot():\n\n\nCode\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()\n\n\n\n\n\nNotches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\nPlotting the distribution of Maths scores by gender in notched plot instead of boxplot:\n\n\nCode\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\n\n1.7.8 Geometric Objects: geom_violin\ngeom_violin is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\nPlotting the distribution of Maths score by gender in violin plot:\n\n\nCode\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n\n1.7.9 Geometric Objects: geom_point()\ngeom_point() is especially useful for creating scatterplot.\nPlotting a scatterplot showing the Maths and English grades of pupils by using geom_point():\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()\n\n\n\n\n\n\n\n1.7.10 geom objects can be combined\nPlotting the data points on the boxplots by using both geom_boxplot() and geom_point():\n\n\nCode\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-stat",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-stat",
    "title": "1 A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.8 Essential Grammatical Elements in ggplot2: stat",
    "text": "1.8 Essential Grammatical Elements in ggplot2: stat\nThe Statistics functions statistically transform data, usually as some form of summary. For example:\n\nfrequency of values of a variable (bar graph)\n\na mean\na confidence limit\n\nThere are two ways to use these functions:\n\nadd a stat_() function and override the default geom, or\nadd a geom_() function and override the default stat.\n\n\nThe boxplots below are incomplete because the positions of the means were not shown.\n\n\nCode\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot()\n\n\n\n\n\n\n1.8.1 Working with stat()_\nThe code chunk below adds mean values by using stat_summary() function and overriding the default geom.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun.y=\"mean\",         \n               colour =\"red\",        \n               size=4)    \n\n\n\n\n\n\n1.8.2 Working with geom()_\nThe code chunk below adding mean values by using geom_() function and overriding the default stat.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun.y=\"mean\",           \n             colour =\"red\",          \n             size=4)\n\n\n\n\n\n\n1.8.3 Adding a best fit curve on a scatterplot\nThe scatterplot below shows the relationship of Maths and English grades of pupils. The interpretability of this graph can be improved by adding a best fit curve using geom_smooth().\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5)\n\n\n\n\n\nThe default method used is loess. It can be overridden as shown below.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-facets",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-facets",
    "title": "1 A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.9 Essential Grammatical Elements in ggplot2: Facets",
    "text": "1.9 Essential Grammatical Elements in ggplot2: Facets\nFacetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data. They are an alternative to aesthetics for displaying additional discrete variables. ggplot2 supports two types of factes, namely: facet_grid() and facet_wrap.\n\n1.9.1 Working with facet_wrap()\nfacet_wrap wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\nPlotting a trellis plot using facet-wrap():\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n\n1.9.2 Working with facet_grid()\nfacet_grid() forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\nPlotting a trellis plot using facet_grid():\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "title": "1 A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.10 Essential Grammatical Elements in ggplot2: Coordinates",
    "text": "1.10 Essential Grammatical Elements in ggplot2: Coordinates\nThe Coordinates functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use, they are:\n\ncoord_cartesian(): the default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out).\ncoord_flip(): a cartesian system with the x and y flipped.\ncoord_fixed(): a cartesian system with a “fixed” aspect ratio (e.g. 1.78 for a “widescreen” plot).\ncoord_quickmap(): a coordinate system that approximates a good aspect ratio for maps.\n\n\n1.10.1 Working with Coordinate\nBy the default, the bar chart of ggplot2 is in vertical form.\n\n\nCode\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\nThe code chunk below flips the horizontal bar chart into vertical bar chart by using coord_flip().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n1.10.2 Changing the y- and x- axis range\nThe scatterplot on the right is slightly misleading because the y-aixs and x-axis range are not equal.\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n\n\n\n\n\nThe code chunk below fixed both the y-axis and x-axis range from 0-100.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-themes",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-themes",
    "title": "1 A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.11 Essential Grammatical Elements in ggplot2: themes",
    "text": "1.11 Essential Grammatical Elements in ggplot2: themes\nThemes control elements of the graph not related to the data. For example:\n\nbackground colour\nsize of fonts\ngridlines\ncolour of labels\n\nBuilt-in themes include: - theme_gray() (default) - theme_bw() - theme_classic()\nA list of theme can be found at this link. Each theme element can be conceived of as either a line (e.g. x-axis), a rectangle (e.g. graph background), or text (e.g. axis title).\n\n1.11.1 Working with theme\n\ntheme_gray()theme_classic()theme_minimal()\n\n\nA horizontal bar chart plotted using theme_gray():\n\n\nCode\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\n\n\n\nA horizontal bar chart plotted using theme_classic():\n\n\nCode\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\n\n\nA horizontal bar chart plotted using theme_minimal().\n\n\nCode\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#reference",
    "title": "1 A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.12 Reference",
    "text": "1.12 Reference\n\nHadley Wickham (2023) ggplot2: Elegant Graphics for Data Analysis. Online 3rd edition.\nWinston Chang (2013) R Graphics Cookbook 2nd edition. Online version.\nHealy, Kieran (2019) Data Visualization: A practical introduction. Online version\nLearning ggplot2 on Paper – Components\nLearning ggplot2 on Paper – Layer\nLearning ggplot2 on Paper – Scale"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "2 Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "In this chapter, we will be introduced to several ggplot2 extensions for creating more elegant and effective statistical graphics. By the end of this exercise, we will be able to:\n\ncontrol the placement of annotation on a graph by using functions provided in ggrepel package,\ncreate professional publication quality figure by using functions provided in ggthemes and hrbrthemes packages,\nplot composite figure by combining ggplot2 graphs by using patchwork package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#overview",
    "title": "2 Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "In this chapter, we will be introduced to several ggplot2 extensions for creating more elegant and effective statistical graphics. By the end of this exercise, we will be able to:\n\ncontrol the placement of annotation on a graph by using functions provided in ggrepel package,\ncreate professional publication quality figure by using functions provided in ggthemes and hrbrthemes packages,\nplot composite figure by combining ggplot2 graphs by using patchwork package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "title": "2 Beyond ggplot2 Fundamentals",
    "section": "2.2 Getting Started",
    "text": "2.2 Getting Started\n\n2.2.1 Installing and loading the required libraries\nIn this exercise, beside tidyverse, four R packages will be used. They are:\n\nggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: an R package provides some extra themes, geoms, and scales for ggplot2.\nhrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.\npatchwork: an R package for preparing composite figure created using ggplot2.\n\nCode chunk below will be used to check if these packages have been installed and also will load them onto your working R environment.\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse)\n\n\n\n2.2.2 Importing data\nFor the purpose of this exercise, a data file called Exam_data will be used. It consists of year end examination grades of a cohort of primary 3 students from a local school. It is in csv file format.\n\nImportViewOverview of the summary statistics\n\n\n\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package.\nreadr is one of the tidyverse package.\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n\n\nCode\nhead(exam_data,10)\n\n\n# A tibble: 10 × 7\n   ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n   &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n 1 Student321 3I    Male   Malay        21     9      15\n 2 Student305 3I    Female Malay        24    22      16\n 3 Student289 3H    Male   Chinese      26    16      16\n 4 Student227 3F    Male   Chinese      27    77      31\n 5 Student318 3I    Male   Malay        27    11      25\n 6 Student306 3I    Female Malay        31    16      16\n 7 Student313 3I    Male   Chinese      31    21      25\n 8 Student316 3I    Male   Malay        31    18      27\n 9 Student312 3I    Male   Malay        33    19      15\n10 Student297 3H    Male   Indian       34    49      37\n\n\n\n\n\n\nCode\nsummary(exam_data)\n\n\n      ID               CLASS              GENDER              RACE          \n Length:322         Length:322         Length:322         Length:322        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n    ENGLISH          MATHS          SCIENCE     \n Min.   :21.00   Min.   : 9.00   Min.   :15.00  \n 1st Qu.:59.00   1st Qu.:58.00   1st Qu.:49.25  \n Median :70.00   Median :74.00   Median :65.00  \n Mean   :67.18   Mean   :69.33   Mean   :61.16  \n 3rd Qu.:78.00   3rd Qu.:85.00   3rd Qu.:74.75  \n Max.   :96.00   Max.   :99.00   Max.   :96.00  \n\n\n\nYear end examination grades of a cohort of primary 3 students from a local school.\nThere are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\n\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "title": "2 Beyond ggplot2 Fundamentals",
    "section": "2.3 Beyond ggplot2 Annotation: ggrepel",
    "text": "2.3 Beyond ggplot2 Annotation: ggrepel\nOne of the challenge in plotting statistical graph is annotation, especially with large number of data points.\nggrepel is an extension of ggplot2 package which provides geoms for ggplot2 to repel overlapping text as in our examples below.\n\nThe exampleWorking with ggrepel\n\n\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\nWe simply replace geom_text() by geom_text_repel() and geom_label() by geom_label_repel.\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "title": "2 Beyond ggplot2 Fundamentals",
    "section": "2.4 Beyond ggplot2 Themes",
    "text": "2.4 Beyond ggplot2 Themes\nggplot2 comes with eight built-in themes, they are: theme_gray(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal(), and theme_void().\n\n\nCode\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\nRefer to this link to learn more about ggplot2 Themes\n\n2.4.1 Working with ggtheme package\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\n\ntheme_economisttheme_fivethirtyeighttheme_stata\n\n\n\n\nCode\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\n\n\n\n\nCode\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_fivethirtyeight()\n\n\n\n\n\n\n\n\n\nCode\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_stata()\n\n\n\n\n\n\n\n\n\n\n2.4.2 Working with hrbthems package\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\nThe second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used. Consult this vignette to learn more.\n\nBasicWith Elements\n\n\n\n\nCode\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\n\n\n\n\n\nCode\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n\n\n\n\n\n\n\n\n\n\n\nWhat can we learn?\n\n\n\n\naxis_title_size argument is used to increase the font size of the axis title to 18,\nbase_size argument is used to increase the default axis label to 15, and\ngrid argument is used to remove the x-axis grid lines."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "title": "2 Beyond ggplot2 Fundamentals",
    "section": "2.5 Beyond Single Graph",
    "text": "2.5 Beyond Single Graph\nIt is not unusual that multiple graphs are required to tell a compelling visual story. There are several ggplot2 extensions provide functions to compose figure with multiple graphs. In this section, we will learn how to create composite plot by combining multiple graphs.\nFirst, let us create three statistical graphics.\n\nDistribution of Maths scoresDistribution of English scoresScatterplot for English score versus Maths score\n\n\n\n\nCode\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\np1\n\n\n\n\n\n\n\n\n\nCode\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\np2\n\n\n\n\n\n\n\n\n\nCode\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\np3\n\n\n\n\n\n\n\n\n\n2.5.1 Creating Composite Graphics: pathwork methods\nThere are several ggplot2 extension’s functions support the needs to prepare composite figure by combining several graphs such as grid.arrange() of gridExtra package and plot_grid() of cowplot package. In this section, we will use an ggplot2 extension called patchwork which is specially designed for combining separate ggplot2 graphs into a single figure.\nPatchwork package has a very simple syntax where we can create layouts super easily. Here’s the general syntax that combines:\n\nTwo-Column Layout using the Plus Sign +.\nParenthesis () to create a subplot group.\nTwo-Row Layout using the Division Sign /\n\n\n\n2.5.2 Combining two ggplot2 graphs\nFigure in the tabset below shows a composite of two histograms created using patchwork. Note how simple the syntax used to create the plot!\n\nTwo-Column LayoutTwo-Row Layout\n\n\n\np1 + p2\n\n\n\n\n\n\n\np1 / p2\n\n\n\n\n\n\n\n\n\n2.5.3 Combining three ggplot2 graphs\nWe can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:\n\n“|” operator to stack two ggplot2 graphs,\n“/” operator to place the plots beside each other,\n“()” operator the define the sequence of the plotting.\n\n\n(p1 / p2) | p3\n\n\n\n\n\n\n2.5.4 Creating a composite figure with tag\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown in the figure below.\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\n2.5.5 Creating figure with insert\nBeside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n\n\n\n\n\n2.5.6 Creating a composite figure by using patchwork and ggtheme\nFigure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#reference",
    "title": "2 Beyond ggplot2 Fundamentals",
    "section": "2.6 Reference",
    "text": "2.6 Reference\n\nPatchwork R package goes nerd viral\nggrepel\nggthemes\nhrbrthemes\nggplot tips: Arranging plots\nggplot2 Theme Elements Demonstration\nggplot2 Theme Elements Reference Sheet"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html",
    "title": "4 Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "When telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, we will learn how to create animated data visualisation by using gganimate and plotly r packages. At the same time, we will also learn how to\n(i) reshape data by using tidyr package, and\n(ii) process, wrangle and transform data by using dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n\n\n\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip\n\n\n\nBefore you start making animated graphs, you should first ask yourself: Does it makes sense to go through the effort? If you are conducting an exploratory data analysis, a animated graphic may not be worth the time investment. However, if you are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#overview",
    "title": "4 Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "When telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, we will learn how to create animated data visualisation by using gganimate and plotly r packages. At the same time, we will also learn how to\n(i) reshape data by using tidyr package, and\n(ii) process, wrangle and transform data by using dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n\n\n\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip\n\n\n\nBefore you start making animated graphs, you should first ask yourself: Does it makes sense to go through the effort? If you are conducting an exploratory data analysis, a animated graphic may not be worth the time investment. However, if you are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#getting-started",
    "title": "4 Programming Animated Statistical Graphics with R",
    "section": "4.2 Getting Started",
    "text": "4.2 Getting Started\n\n4.2.1 Loading the R packages\nFirst, write a code chunk to check, install and load the following R packages:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\n\n\n4.2.2 Importing the data\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\nWrite a code chunk to import Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.\n\nmutate_each_()mutate_at()across()\n\n\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nread_xls() of readxl package is used to import the Excel worksheet.\nmutate_each_() of dplyr package is used to convert all character data type into factor.\nmutate of dplyr package is used to convert data values of Year field into integer.\n\n\n\nUnfortunately, mutate_each_() was deprecated in dplyr 0.7.0. and funs() was deprecated in dplyr 0.8.0. In view of this, we will re-write the code by using mutate_at() as shown in the code chunk below.\n\n\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\nInstead of using mutate_at(), across() can be used to derive the same outputs.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#animated-data-visualisation-gganimate-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#animated-data-visualisation-gganimate-methods",
    "title": "4 Programming Animated Statistical Graphics with R",
    "section": "4.3 Animated Data Visualisation: gganimate methods",
    "text": "4.3 Animated Data Visualisation: gganimate methods\ngganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how the positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes() defines how different aesthetics should be eased during transitions.\n\n\n4.3.1 Building a static population bubble plot\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') \n\n\n\n\n\n\n4.3.2 Building the animated bubble plot\nIn the code chunk below,\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#animated-data-visualisation-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#animated-data-visualisation-plotly",
    "title": "4 Programming Animated Statistical Graphics with R",
    "section": "4.4 Animated Data Visualisation: plotly",
    "text": "4.4 Animated Data Visualisation: plotly\nIn Plotly R package, both ggplotly() and plot_ly() support key frame animations through the frame argument/aesthetic. They also support an ids argument/aesthetic to ensure smooth transitions between objects with the same id (which helps facilitate object constancy).\n\n4.4.1 Building an animated bubble plot: ggplotly() method\nIn this sub-section, we will learn how to create an animated bubble plot by using ggplotly() method.\n\n\nCode\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\n\nThe animated bubble plot above includes a play/pause button and a slider component for controlling the animation.\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nAppropriate ggplot2 functions are used to create a static bubble plot.\nThe output is then saved as an R object called gg. ggplotly() is then used to convert the R graphic object into an animated svg object.\n\n\n\nNotice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position='none') should be used as shown in the plot and code chunk below.\n\n\nCode\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)\n\n\n\n\n\n\n\n\n4.4.2 Building an animated bubble plot: plot_ly() method\nIn this sub-section, we will learn how to create an animated bubble plot by using plot_ly() method.\n\n\nCode\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#reference",
    "title": "4 Programming Animated Statistical Graphics with R",
    "section": "4.5 Reference",
    "text": "4.5 Reference\n\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html",
    "title": "10 Visual Statistical Analysis",
    "section": "",
    "text": "In this hands-on exercise, we will gain hands-on experience on using:\n\nggstatsplot package to create visual graphics with rich statistical information,\nperformance package to visualise model diagnostics, and\nparameters package to visualise model parameters"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#learning-outcome",
    "title": "10 Visual Statistical Analysis",
    "section": "",
    "text": "In this hands-on exercise, we will gain hands-on experience on using:\n\nggstatsplot package to create visual graphics with rich statistical information,\nperformance package to visualise model diagnostics, and\nparameters package to visualise model parameters"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "title": "In-Class Exercise 1: Now You See It!",
    "section": "",
    "text": "In this hands-on exercise, two R packages will be used. They are:\n\ntidyverse, and\nhaven\n\nThe code chunk used is as follows:\n\npacman::p_load(tidyverse,haven)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#loading-r-packages",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#loading-r-packages",
    "title": "In-Class Exercise 1: Now You See It!",
    "section": "",
    "text": "In this hands-on exercise, two R packages will be used. They are:\n\ntidyverse, and\nhaven\n\nThe code chunk used is as follows:\n\npacman::p_load(tidyverse,haven)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#importing-pisa-data",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#importing-pisa-data",
    "title": "In-Class Exercise 1: Now You See It!",
    "section": "Importing PISA data",
    "text": "Importing PISA data\nThe code chunk below uses read_sas() of haven to import PISA data into R environment.\n\nstu_qqq &lt;- read_sas(\"data/cy08msp_stu_qqq.sas7bdat\")\n\nThe code chunk below uses filter() of dplyr to filter where country (CNT) is Singapore (SGP).\n\nstu_qqq_SG &lt;- stu_qqq %&gt;%\nfilter(CNT == \"SGP\")\n\nwrite_rds() is a function to save an R object in a file using the RDS (R Data Serialization) file format. read_rds() is a function used to read an R object from a file in the RDS format. RDS is a binary format that allows you to save and load R objects efficiently.\n\nwrite_rds(stu_qqq_SG,\"data/stu_qqq_SG.rds\")\n\n\nstu_qqq_SG &lt;- read_rds(\"data/stu_qqq_SG.rds\")"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to My Visual Analytics and Application Learning Journey!",
    "section": "",
    "text": "Greetings!\nI am delighted to welcome you to this dedicated space where I share my insights and experiences throughout my Visual Analytics Course (ISSS608) under the guidance of Professor Kam Tin Seong. This journey is a part of my Master of IT in Business (MITB) at Singapore Management University.\n\n\nWhat to Expect\nThis website serves as a comprehensive repository of the visual analytics journey I undertook during the course. You’ll find a collection of exercises, projects, and reflections that not only showcase my progress but also reflect the skills and knowledge gained throughout this learning adventure.\n\n\nNavigation\nTo explore my learning journey, simply navigate through the tabs on the top. Each tab corresponds to a different aspect of the course, providing you with a structured and organized way to follow my progression.\n\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercises\nIn-class Exercises\nTake-home Exercises\n\n\n\n\n\nLatest Posts\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\nTake-home Exercise 3: Be Weatherwise or Otherwise\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 14, 2024\n\n\n\n\n\n\n  \n\n\n\n\n10 Visual Statistical Analysis\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 1, 2024\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "title": "Take-home Exercise 2: DataVis Makeover",
    "section": "",
    "text": "The objective of this exercise is to enhance the original visualization prepared by peer in Take-home Exercise 1. The peer’s submission will be critiqued concerning clarity and aesthetics. The original design will be remade by using ggplot2, ggplot2 extensions and tidyverse packages."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#overview",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#overview",
    "title": "Take-home Exercise 2: DataVis Makeover",
    "section": "",
    "text": "The objective of this exercise is to enhance the original visualization prepared by peer in Take-home Exercise 1. The peer’s submission will be critiqued concerning clarity and aesthetics. The original design will be remade by using ggplot2, ggplot2 extensions and tidyverse packages."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#getting-started",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#getting-started",
    "title": "Take-home Exercise 2: DataVis Makeover",
    "section": "2. Getting Started",
    "text": "2. Getting Started\nThe data preparation procedures undertaken by the original author of the graphs are outlined here for easy reference.\n\n2.1 Installing and loading the required R packages\n\npacman::p_load(tidyverse, haven, ggplot2, patchwork, dplyr)\n\n\n\n2.2 Data Preparation\n\n1. Import PISA data into R environment:\n\nstu_qqq &lt;- read_sas(\"data/cy08msp_stu_qqq.sas7bdat\")\n\n\n\n2. Filter out Singapore students in the data:\n\nstu_qqq_SG &lt;- stu_qqq %&gt;% \n  filter(CNT ==\"SGP\")\n\nwrite_rds(stu_qqq_SG,\n          \"data/stu_qqq_SG.rds\")\n\nstu_qqq_SG &lt;- \nread_rds(\"data/stu_qqq_SG.rds\")\n\n\n\n3. Select related to math, reading and science student performance data, as well as schools, gender, and socioeconomic status of related data:\n\nRelated_math_read_scie_data &lt;- stu_qqq_SG %&gt;%\n  select(contains(c(\"ID\",\"ST004D01T\",\"math\", \"read\", \"scie\",\"ST259Q01JA\",\"ST259Q02JA\",\"ST005Q01JA\",\"ST007Q01JA\")))\n\nwrite_rds(Related_math_read_scie_data,\n          \"data/Related_math_read_scie_data.rds\")\n\n\nRelated_math_read_scie_data &lt;- \nread_rds(\"data/Related_math_read_scie_data.rds\")\n\n\n\n4. Calculate the average of PV1-10 Maths/Read/Science, representing each student’s ability to perform maths/Read/Science\n\nRelated_math_read_scie_data &lt;- Related_math_read_scie_data %&gt;%\n  mutate(avg_pvMATH = rowMeans(select(., ends_with(\"Math\")), na.rm = TRUE))\n\nRelated_math_read_scie_data &lt;- Related_math_read_scie_data %&gt;%\n  mutate(avg_pvREAD = rowMeans(select(., ends_with(\"READ\")), na.rm = TRUE))\n\nRelated_math_read_scie_data &lt;- Related_math_read_scie_data %&gt;%\n  mutate(avg_pvSCIE = rowMeans(select(., ends_with(\"SCIE\")), na.rm = TRUE))\n\nRelated_math_read_scie_data %&gt;%\n  select(CNTSCHID, CNTSTUID,avg_pvMATH, avg_pvREAD, avg_pvSCIE) %&gt;%\n  head(5)\n\n# A tibble: 5 × 5\n  CNTSCHID CNTSTUID avg_pvMATH avg_pvREAD avg_pvSCIE\n     &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;\n1 70200052 70200001       605.       667.       640.\n2 70200134 70200002       690.       628.       672.\n3 70200112 70200003       677.       583.       660.\n4 70200004 70200004       401.       361.       344.\n5 70200152 70200005       436.       476.       479."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualization-critique-and-remake",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualization-critique-and-remake",
    "title": "Take-home Exercise 2: DataVis Makeover",
    "section": "3. Visualization Critique and Remake",
    "text": "3. Visualization Critique and Remake\n\n3.1 Maths/Read/Science Distributions\n\n3.1.1 Original Design\n\n\nCode\np1 &lt;- ggplot(data=Related_math_read_scie_data, aes(x = avg_pvMATH)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  geom_vline(aes(xintercept = median(avg_pvMATH)), color = \"red\", linetype = \"dashed\") +\n  annotate(\"text\", x = median(Related_math_read_scie_data$avg_pvMATH), y = 30, \n           label = paste(\"Median:\", round(median(Related_math_read_scie_data$avg_pvMATH), 2)), \n           vjust = 1, color = \"red\") +\n  labs(y = \"Count\")\n\np2 &lt;- ggplot(data=Related_math_read_scie_data, aes(x = avg_pvREAD)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  geom_vline(aes(xintercept = median(avg_pvREAD)), color = \"red\", linetype = \"dashed\") +\n  annotate(\"text\", x = median(Related_math_read_scie_data$avg_pvREAD), y = 30, \n           label = paste(\"Median:\", round(median(Related_math_read_scie_data$avg_pvREAD), 2)), \n           vjust = 1, color = \"red\") +\n  labs(y = \"Count\")\n\np3 &lt;- ggplot(data=Related_math_read_scie_data, aes(x = avg_pvSCIE)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  geom_vline(aes(xintercept = median(avg_pvSCIE)), color = \"red\", linetype = \"dashed\") +\n  annotate(\"text\", x = median(Related_math_read_scie_data$avg_pvSCIE), y = 30, \n           label = paste(\"Median:\", round(median(Related_math_read_scie_data$avg_pvSCIE), 2)), \n           vjust = 1, color = \"red\") +\n  labs(y = \"Count\")\n\np1 + p2 + p3 +\n  plot_layout(guides = \"collect\") +\n  plot_annotation(title = \"Distributions of Maths/Reading/Science with Median Lines\", tag_levels = \"I\")\n\n\n\n\n\n\n\n3.1.2 Clarity\n\nData Representation - The selection of a histogram along with median lines is a good approach as it effectively shows the distribution of the students’ performance among various subjects.\nTitle - The main title appears to be informative and provides a clear indication of the graph’s purpose. However, it can be more concise while still retaining sufficient details, such as “Distributions of Singapore Students’ Performance in Maths/Reading/Science”. Furthermore, the subtitles “I”, “II”, “III” are meaningless and redundant, given the presence of clear labels on the x-axis.\nLabels - Consider using distinct labels for graph axes instead of using the same labels as the column names, i.e. “avg_pvMATH”, “avg_pvREAD”, and “avg_pvSCIE” for x-axis, and “count” for y-axis, which may lack clarity for users when interpreting charts.\nMedian line annotations - Placing the median value at the bottom where it intersects with the x-axis, creates a readability issue.\nScale consistency - The inconsistency in the y-axis scale compromises the clarity of the graph, hindering accurate data interpretation. Varying scales distort visual perception, making it challenging to compare across different subjects. Maintaining a consistent y-axis scale is crucial for improved clarity.\n\n\n\n3.1.3 Aesthetics\n\nThe use of grey for both the background and the histogram results in a lack of visual contrast. Enhancing the background can elevate the overall aesthetics, providing a cleaner and more professional appearance.\nThe alignment of the graph title is not centered, creating a lack of symmetry and balance. Centering the title would enhance the aesthetic appeal and improve the overall professional look of the graph.\n\n\n\n3.1.4 Remake\n\n\nCode\n# Calculate mean and median for maths\nmaths_mean &lt;- mean(Related_math_read_scie_data$avg_pvMATH)\nmaths_median &lt;- median(Related_math_read_scie_data$avg_pvMATH)\n\n# Plot the histogram of maths\np1 &lt;- ggplot(data=Related_math_read_scie_data, aes(x = avg_pvMATH)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  geom_vline(aes(xintercept = maths_median), color = \"red\", linetype = \"dashed\") +\n  annotate(\"text\", x = maths_median, y = 1800, label = paste(\"Median=\", round(maths_median, 2)), size=3, color = \"red\") +\n  coord_cartesian(xlim = c(150, 900),\n                  ylim = c(0, 2000)) +\n  labs(y = \"No. of Students\", x = \"Maths\") +\n  theme_minimal() \n\n# Calculate mean and median for reading\nread_mean &lt;- mean(Related_math_read_scie_data$avg_pvREAD)\nread_median &lt;- median(Related_math_read_scie_data$avg_pvREAD)\n\n# Plot the histogram of reading\np2 &lt;- ggplot(data=Related_math_read_scie_data, aes(x = avg_pvREAD)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  geom_vline(aes(xintercept = read_median), color = \"red\", linetype = \"dashed\") +\n  annotate(\"text\", x = read_median, y = 2000, label = paste(\"Median=\", round(read_median, 2)), size=3, color = \"red\") +\n  coord_cartesian(xlim = c(150, 900),\n                  ylim = c(0, 2000)) +\n  labs(x = \"Reading\") +\n  theme_minimal() +\n  theme(axis.title.y = element_blank())\n\n# Calculate mean and median for reading\nsci_mean &lt;- mean(Related_math_read_scie_data$avg_pvSCIE)\nsci_median &lt;- median(Related_math_read_scie_data$avg_pvSCIE)\n\n# Plot the histogram of science\np3 &lt;- ggplot(data=Related_math_read_scie_data, aes(x = avg_pvSCIE)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  geom_vline(aes(xintercept = sci_median), color = \"red\", linetype = \"dashed\") +\n  annotate(\"text\", x = sci_median, y = 1900, label = paste(\"Median=\", round(sci_median, 2)), size=3, color = \"red\") +\n  coord_cartesian(xlim = c(150, 900),\n                  ylim = c(0, 2000)) +\n  labs(, x = \"Science\") +\n  theme_minimal() +\n  theme(axis.title.y = element_blank())\n\n\np1 + p2 + p3 +\n  plot_layout(guides = \"collect\") +\n  plot_annotation(title = \"Distributions of Singapore Students' Performance in Maths/Reading/Science\",\n                  theme = theme(plot.title = element_text(hjust = 0.75,face = \"bold\")))\n\n\n\n\n\n\n\n\n3.2 The Relationship between Gender and Performances\n\n3.2.1 Original Design\n\n\nCode\np4 &lt;- ggplot(data = Related_math_read_scie_data, aes(x = avg_pvMATH, fill = factor(ST004D01T))) +\n  geom_histogram(bins = 10, color = \"grey30\", position = \"identity\", alpha = 0.7) +\n  labs(x = \"avg_pvMATH\", y = \"Count\", fill = \"Gender\") +\n  scale_fill_manual(values = c(\"skyblue\", \"pink\"))\n\np5 &lt;- ggplot(data = Related_math_read_scie_data, aes(x = avg_pvREAD, fill = factor(ST004D01T))) +\n  geom_histogram(bins = 10, color = \"grey30\", position = \"identity\", alpha = 0.7) +\n  labs(x = \"avg_pvREAD\", y = \"Count\", fill = \"Gender\") +\n  scale_fill_manual(values = c(\"skyblue\", \"pink\"))\n\np6 &lt;- ggplot(data = Related_math_read_scie_data, aes(x = avg_pvSCIE, fill = factor(ST004D01T))) +\n  geom_histogram(bins = 10, color = \"grey30\", position = \"identity\", alpha = 0.7) +\n  labs(x = \"avg_pvSCIE\", y = \"Count\", fill = \"Gender\") +\n  scale_fill_manual(values = c(\"skyblue\", \"pink\"))\n\np4 + p5 + p6 +\n  plot_layout(guides = \"collect\") +\n  plot_annotation(title = \"The Relationship between Gender and Performances\", tag_levels = \"I\")\n\n\n\n\n\n\n\n3.2.2 Clarity\nJust like the Maths/Read/Science Distributions discussed above, there are opportunities for enhancements in sub titles, labels, and scale consistency. Additionally, two more points require attention.\n\nData Representation - The interpretation of the histogram filled with colors for different genders appears confusing, as the genders are overlapped instead of being stacked or grouped. Moreover, the choice of histogram may not be clear enough to interpret the relationship between gender and performance. A boxplot or violin plot would be more suitable for illustrating the distribution of a numeric variable across different categories. This alternative provides information about central tendency, spread, and potential outliers, offering a clearer representation of the data.\nLegend annotations - The legend annotations should be improved for better clarity. Instead of using numerical values (1 and 2), more informative labels such as “Male” and “Female” would enhance the interpretability of the graph, providing a more user-friendly and intuitive representation of the gender categories.\n\n\n\n3.2.3 Remake\n\n\nCode\n# select variables of interest and rename - gender and avg score\ndata_gender &lt;- Related_math_read_scie_data %&gt;%\n  select(ST004D01T,avg_pvMATH,avg_pvREAD,avg_pvSCIE)\n\ndata_gender &lt;- data_gender %&gt;%\n  rename('Gender'='ST004D01T',\n         'Math'='avg_pvMATH',\n         'Reading'='avg_pvREAD',\n         'Science'='avg_pvSCIE')\n\n# change data type for Gender\ndata_gender$Gender &lt;- as.factor(data_gender$Gender)\n\n# recode Gender\ndata_gender &lt;- data_gender %&gt;%\n  mutate(Gender=(recode(Gender, '1'=\"Female\", \n                        '2'=\"Male\")))\n\n# reshape the dataset from wide to long format\ndata_gender &lt;- gather(data=data_gender, key = \"Subject\", value = \"Score\", 2:4)\n\n\n# Create the boxplots \nggplot(data_gender, \n       aes(y = Score, x= Gender, fill = Gender)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun.y = \"mean\",         \n               colour =\"red\",        \n               size=2)+\n  scale_fill_manual(values = c(\"Female\" = \"pink\", \"Male\" = \"skyblue\"))+\n  facet_wrap(~ Subject) +\n  labs(y = \"Score\", \n       x = \"\",\n      title = \"The Relationship between Gender and Performances\")+\n  theme_minimal()+\n  theme(\n    legend.position = \"bottom\",\n    legend.title = element_blank(),\n    axis.text.x = element_blank(),\n    plot.title = element_text(hjust = 0.5, face = \"bold\")\n  )\n\n\n\n\n\n\n\n\n3.3 The Relationship between School and Performances\n\n3.3.1 Original Design\nTo get a clearer picture of the impact of school on the performance, the original design firstly calculated the average score for each school.\n\n\nCode\n# compute the mean score of students for each school\nRelated_math_read_scie_data &lt;- Related_math_read_scie_data %&gt;% \n  group_by(CNTSCHID) %&gt;%\n  mutate(avg_pvMATH_school = mean(avg_pvMATH, na.rm = TRUE))\n\nRelated_math_read_scie_data &lt;- Related_math_read_scie_data %&gt;% \n  group_by(CNTSCHID) %&gt;%\n  mutate(avg_pvREAD_school = mean(avg_pvREAD, na.rm = TRUE))\n\nRelated_math_read_scie_data &lt;- Related_math_read_scie_data %&gt;% \n  group_by(CNTSCHID) %&gt;%\n  mutate(avg_pvSCIE_school = mean(avg_pvSCIE, na.rm = TRUE))\n\nRelated_math_read_scie_data %&gt;%\n  select(CNTSCHID, CNTSTUID,avg_pvMATH_school, avg_pvREAD_school, avg_pvSCIE_school) %&gt;%\n  head(5)\n\n\n# A tibble: 5 × 5\n# Groups:   CNTSCHID [5]\n  CNTSCHID CNTSTUID avg_pvMATH_school avg_pvREAD_school avg_pvSCIE_school\n     &lt;dbl&gt;    &lt;dbl&gt;             &lt;dbl&gt;             &lt;dbl&gt;             &lt;dbl&gt;\n1 70200052 70200001              581.              598.              585.\n2 70200134 70200002              523.              487.              519.\n3 70200112 70200003              588.              549.              581.\n4 70200004 70200004              510.              480.              494.\n5 70200152 70200005              485.              468.              481.\n\n\n\n\nCode\n# create the plot\np7 &lt;- ggplot(data = Related_math_read_scie_data, \n             aes(x = CNTSCHID, \n                 y = avg_pvMATH_school)) +\n  geom_point() +\n  geom_smooth(formula = y~x, method = lm, \n              size = 0.5) +  \n  labs(x = \"School ID\", y = \"Average PV Maths\")\n\np8 &lt;- ggplot(data = Related_math_read_scie_data, \n             aes(x = CNTSCHID, \n                 y = avg_pvREAD_school)) +\n  geom_point() +\n  geom_smooth(formula = y~x, method = lm, \n              size = 0.5) +\n  labs(x = \"School ID\", y = \"Average PV Read\")\n\np9 &lt;- ggplot(data = Related_math_read_scie_data, \n             aes(x = CNTSCHID, \n                 y = avg_pvSCIE_school)) +\n  geom_point() +\n  geom_smooth(formula = y~x, method = lm, \n              size = 0.5) +  \n  labs(x = \"School ID\", y = \"Average PV Scie\")\n\np7 + p8 + p9 +\n    plot_layout(guides = \"collect\") +\n  plot_annotation(title = \"The Relationship between School and Performances\", tag_levels = \"I\")\n\n\n\n\n\n\n\n3.3.2 Clarity\n\nData Representation - The School ID, representing each individual school, should be considered as discrete data rather than continuous. Consequently, opting for a scatter plot is not a suitable method for understanding the influence of school on performance. Histograms, density plots, or boxplots (including violin plots) offer more effective means of visualizing the distribution and variability of a single variable.\nTitle - The subtitles “I”, “II”, “III” are meaningless and redundant, given the presence of labels on the y-axis.\nLabels - The school ID labels on the x-axis overlap, causing a readability issue.\nAxis annotations - The annotations for the x-axis appear three times, resulting in redundancy. Additionally, the positioning of annotations on the y-axis is unclear and hampers readability.\nScale consistency - The inconsistency in the y-axis scale compromises the clarity of the graph, hindering accurate data interpretation. Varying scales distort visual perception, making it challenging to compare across different subjects. Maintaining a consistent y-axis scale is crucial for improved clarity.\n\n\n\n3.3.3 Remake\n\n\nCode\npacman::p_load(ggdist)\n\n# select variables of interest and rename - school ID and avg score\ndata_school &lt;- Related_math_read_scie_data %&gt;%\n  select('CNTSCHID','avg_pvMATH_school', 'avg_pvREAD_school', 'avg_pvSCIE_school')\n\ndata_school &lt;- data_school %&gt;%\n  rename('School_ID'='CNTSCHID',\n         'Math'='avg_pvMATH_school',\n         'Reading'='avg_pvREAD_school',\n         'Science'='avg_pvSCIE_school')\n\n# change of data type for school ID\ndata_school$School_ID &lt;- as.character(data_school$School_ID)\n\n# reshape the dataset from wide to long format\ndata_school &lt;- gather(data=data_school, key = \"Subject\", value = \"Avg_Score\", 2:4)\n\n\n# create the plot\nggplot(data_school, \n       aes(x = Avg_Score, \n           y = Subject)) +\n\n  stat_halfeye(adjust = .5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA,\n               alpha = .75) +\n \n  geom_boxplot(width = .20,\n               alpha = 0.25,\n               outlier.colour = \"black\", \n               outlier.size = 3) + \n  stat_summary(geom = \"point\",       \n               fun.y = \"mean\",         \n               colour =\"red\",        \n               size=2) +\n  labs(x = \"Score\", \n       y = NULL, \n       title = \"The Relationship between School and Performances\")+\n  theme_minimal()+\n  theme(legend.position = \"none\",\n        plot.title = element_text(hjust = 0.5, face = \"bold\"))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#learning-points",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#learning-points",
    "title": "Take-home Exercise 2: DataVis Makeover",
    "section": "4. Learning Points",
    "text": "4. Learning Points\nCompleting Take-home Exercise 2 reinforced key lessons from Exercise 1. I learned that there’s no one-size-fits-all approach to visualization; success lies in clear, aesthetic, and meaningful communication. Exploring classmates’ works brought fresh ideas for improvement, emphasizing the value of continuous learning.\nMoreover, Exercise 2 highlighted the importance of tailoring visualizations to the audience. Analyzing efficient coding practices from peers deepened my understanding and improved my ggplot skills, enabling the creation of more insightful charts. This exercise not only enhanced my technical abilities but also emphasized the crucial nuances for effective data visualization."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#data-visualisation",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#data-visualisation",
    "title": "Take-home Exercise 3: Be Weatherwise or Otherwise",
    "section": "3. Data Visualisation",
    "text": "3. Data Visualisation\n\n3.1 Visualizing the Uncertainty of Historical Temperature\nA boxplot will be generated to visualize the distribution of historical daily mean temperature data for January of each year. Additionally, confidence intervals of the mean temperature by year will be also be plotted. This will establish a baseline for comparison with projected increases.\nFirstly, code chunk below will be used to derive the necessary summary statistics.\n\nmy_sum &lt;- subset %&gt;%\n  group_by(Year) %&gt;%\n  summarise(\n    n=n(),\n    mean=mean(Mean_temp),\n    sd=sd(Mean_temp)\n    ) %&gt;%\n  mutate(se=sd/sqrt(n-1))\n\nNext, the code chunk below will be used to display my_sum tibble data frame in an html table format.\n\nknitr::kable(head(my_sum), format = 'html')\n\n\n\n\nYear\nn\nmean\nsd\nse\n\n\n\n\n1983\n31\n26.45161\n0.6587215\n0.1202655\n\n\n1993\n31\n26.20645\n0.8390214\n0.1531837\n\n\n2003\n31\n26.66129\n0.8179965\n0.1493450\n\n\n2013\n31\n27.04516\n0.9804212\n0.1789996\n\n\n2023\n31\n26.53548\n1.2755517\n0.2328828\n\n\n\n\n\n\n\nNow we are ready to create the visualization.\n\n\nCode\np1 &lt;- ggplot(my_sum) + \n            geom_errorbar_interactive(aes(x=factor(Year),\n                              ymin=mean-1.96*se, \n                              ymax=mean+1.96*se), \n                              data_id = my_sum$Year,\n                              width=0.2, \n                              colour=\"black\", \n                              alpha=0.9, \n                              size=0.5) +\n                   geom_point_interactive(aes(x=factor(Year), \n                                  y=mean, \n                                  data_id = Year,\n                                  tooltip = paste(\"Year:\", `Year`, \n                                  \"&lt;br&gt;Mean Temperature:\", round(mean, digits = 2),\n                                  \"&lt;br&gt;95% CI:[\", \n                                  round((mean-1.96*se), digits = 2), \",\",\n                                  round((mean+1.96*se), digits = 2),\"]\")),\n                     stat=\"identity\", \n                     color=\"red\", \n                     size = 1.5, \n                     alpha=1) + \n             \n                   ylab(\"Mean Temperature (°C)\") + \n                  coord_cartesian(ylim = c(23.5, 29.5)) +\n                   theme_minimal() + \n                   theme(axis.text.x = element_text(\n                     angle = 45, vjust = 0.5, hjust=1),\n                     axis.title.x = element_blank()) +\n                   ggtitle(\"95% Confidence Interval of Mean\\n Temperature by Year\")\n\np2 &lt;- ggplot(subset,\n             aes(x = factor(Year), y = Mean_temp)) +\n  geom_boxplot_interactive(\n    aes(tooltip = paste(\"Year: \", Year,\n                        \"&lt;br&gt;Median Temperature:\", round(median(Mean_temp), digits = 2)),\n        data_id = Year),\n        fill = \"grey\") +\n  coord_cartesian(ylim = c(23.5, 29.5)) +\n    labs(title = \"Daily Mean Temperature Distribution\\n for January\", x = \"Year\") +\n  theme_minimal() +\ntheme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1),\n  axis.title.x = element_blank(),\n  axis.title.y = element_blank())\n\n\ngirafe(                                  \n  code = print(p1 + p2),                             \n  width_svg = 8,                         \n  height_svg = 8*0.618,\n  options = list(\n         opts_hover(css = \"stroke-width:1\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         ))     \n\n\n\n\n\n\n\n\n3.2 Visualizing the Future Temperature Projection\nFirst, a linear regression model will be used to analyze the trend and predict future temperatures.\n\nCodeSummary\n\n\n\n# Fit linear regression model\nmodel &lt;- lm(mean ~ Year, my_sum)\n\n\n\n\n\nCode\nsummary(model)\n\n\n\nCall:\nlm(formula = mean ~ Year, data = my_sum)\n\nResiduals:\n       1        2        3        4        5 \n 0.07290 -0.27290  0.08129  0.36452 -0.24581 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)\n(Intercept)  6.420774  19.340654   0.332    0.762\nYear         0.010065   0.009656   1.042    0.374\n\nResidual standard error: 0.3053 on 3 degrees of freedom\nMultiple R-squared:  0.2659,    Adjusted R-squared:  0.02117 \nF-statistic: 1.086 on 1 and 3 DF,  p-value: 0.3739\n\n\n\n\n\nNext, we will predict the temperatures with 95% confidence interval for future 10 years, and combine the predicted data with the historical data.\n\n\nCode\n# Predict temperatures for future years\nfuture_years &lt;- c(2033, 2043, 2053, 2063, 2073, 2083, 2093, 2103, 2113, 2123)\npredicted_temperatures &lt;- predict(model, newdata = data.frame(Year = future_years),interval = \"confidence\")\n\n# Combine historical and predicted data\nhist_temperatures &lt;- cbind(my_sum$mean, my_sum$mean-1.96*my_sum$se, my_sum$mean+1.96*my_sum$se )\nall_years &lt;- c(my_sum$Year, future_years)\nall_temperatures &lt;- rbind(hist_temperatures, predicted_temperatures)\nall_data &lt;- data.frame(Year = all_years, all_temperatures)\n\nknitr::kable(all_data,row.names = FALSE, format = 'html')\n\n\n\n\n\nYear\nfit\nlwr\nupr\n\n\n\n\n1983\n26.45161\n26.21589\n26.68733\n\n\n1993\n26.20645\n25.90621\n26.50669\n\n\n2003\n26.66129\n26.36857\n26.95401\n\n\n2013\n27.04516\n26.69432\n27.39600\n\n\n2023\n26.53548\n26.07903\n26.99193\n\n\n2033\n26.88194\n25.86279\n27.90108\n\n\n2043\n26.98258\n25.67888\n28.28628\n\n\n2053\n27.08323\n25.48653\n28.67992\n\n\n2063\n27.18387\n25.28964\n29.07810\n\n\n2073\n27.28452\n25.09007\n29.47897\n\n\n2083\n27.38516\n24.88877\n29.88155\n\n\n2093\n27.48581\n24.68631\n30.28530\n\n\n2103\n27.58645\n24.48303\n30.68987\n\n\n2113\n27.68710\n24.27915\n31.09505\n\n\n2123\n27.78774\n24.07481\n31.50067\n\n\n\n\n\n\n\nNow we are ready to create the visualization.\n\n\nCode\np&lt;-ggplot(all_data, aes(x = Year, y = fit)) +\n  geom_errorbar(\n    aes(ymin=lwr, \n        ymax=upr), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point_interactive(aes(y=all_data$fit), \n           tooltip = paste(\"Year:\", all_data$Year, \n                           \"&lt;br&gt;Mean Temperature:\", round(all_data$fit, digits = 2),\n                           \"&lt;br&gt;95% CI:[\", \n                            round(all_data$lwr, digits = 2), \",\",\n                            round(all_data$upr, digits = 2),\"]\"),\n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  geom_smooth(method = \"lm\", se=FALSE) + \n  labs(title = \"Historical and Predicted Mean Temperatures\",\n       x = \"Year\",\n       y = \"Mean Temperature (°C)\") +\n  theme_minimal()\n\ngirafe(                                \n  ggobj = p,                       \n  width_svg = 8,                         \n  height_svg = 8*0.618,\n  options = list(\n         opts_hover(css = \"stroke-width:1\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         ))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#visual-statistical-analysis-with-ggstatsplot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#visual-statistical-analysis-with-ggstatsplot",
    "title": "10 Visual Statistical Analysis",
    "section": "10.2 Visual Statistical Analysis with ggstatsplot",
    "text": "10.2 Visual Statistical Analysis with ggstatsplot\nggstatsplot is an extension of ggplot2 package for creating graphics with details from statistical tests included in the information-rich plots themselves.\n\nTo provide alternative statistical inference methods by default.\nTo follow best practices for statistical reporting. For all statistical tests reported in the plots, the default template abides by the APA gold standard for statistical reporting.\n\n\n10.2.1 Getting Started\n\na. Installing and launching R packages\nIn this exercise, ggstatsplot and tidyverse will be used.\n\npacman::p_load(ggstatsplot, tidyverse)\n\n\n\nb. Importing data\n\nImportView\n\n\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n\n\nCode\nexam\n\n\n# A tibble: 322 × 7\n   ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n   &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n 1 Student321 3I    Male   Malay        21     9      15\n 2 Student305 3I    Female Malay        24    22      16\n 3 Student289 3H    Male   Chinese      26    16      16\n 4 Student227 3F    Male   Chinese      27    77      31\n 5 Student318 3I    Male   Malay        27    11      25\n 6 Student306 3I    Female Malay        31    16      16\n 7 Student313 3I    Male   Chinese      31    21      25\n 8 Student316 3I    Male   Malay        31    18      27\n 9 Student312 3I    Male   Malay        33    19      15\n10 Student297 3H    Male   Indian       34    49      37\n# ℹ 312 more rows\n\n\n\n\n\n\n\n\n10.2.2 One-sample test: gghistostats() method\nIn the code chunk below, gghistostats() is used to to build an visual of one-sample test on English scores.\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary\n\na. Unpacking the Bayes Factor\n\nA Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories.\nThat’s because the Bayes factor gives us a way to evaluate the data in favor of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favor of a given hypothesis.\nWhen we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes Factor is often written as B10. It can be defined mathematically as\n\nThe Schwarz criterion is one of the easiest ways to calculate rough approximation of the Bayes Factor.\n\n\n\nb. How to interpret Bayes Factor\nA Bayes Factor can be any positive number. One of the most common interpretations is this one—first proposed by Harold Jeffereys (1961) and slightly modified by Lee and Wagenmakers in 2013:\n\n\n\n\n10.2.3 Two-sample mean test: ggbetweenstats()\nIn the code chunk below, ggbetweenstats() is used to build a visual for two-sample mean test of Maths scores by gender.\n\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary\n\n\n10.2.4 Oneway ANOVA Test: ggbetweenstats() method\nIn the code chunk below, ggbetweenstats() is used to build a visual for One-way ANOVA test on English score by race.\n\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\n\n\n\n\n“ns” → only non-significant\n“s” → only significant\n“all” → everything\n\n\n\n10.2.5 Significant Test of Correlation: ggscatterstats()\nIn the code chunk below, ggscatterstats() is used to build a visual for Significant Test of Correlation between Maths scores and English scores.\n\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )\n\n\n\n\n\n\n10.2.6 Significant Test of Association (Depedence) : ggbarstats() methods\nIn the code chunk below, the Maths scores is binned into a 4-class variable by using cut().\n\nexam1 &lt;- exam %&gt;% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n\nIn this code chunk below ggbarstats() is used to build a visual for Significant Test of Association.\n\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#getting-started",
    "title": "10 Visual Statistical Analysis",
    "section": "10.3 Getting Started",
    "text": "10.3 Getting Started\n\n10.3.1 Installing and launching R packages\nIn this exercise, ggstatsplot and tidyverse will be used.\n\npacman::p_load(ggstatsplot, tidyverse)\n\n\n\n10.3.2 Importing data\n\nImportView\n\n\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n\n\nCode\nhead(exam)\n\n\n# A tibble: 6 × 7\n  ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n  &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n1 Student321 3I    Male   Malay        21     9      15\n2 Student305 3I    Female Malay        24    22      16\n3 Student289 3H    Male   Chinese      26    16      16\n4 Student227 3F    Male   Chinese      27    77      31\n5 Student318 3I    Male   Malay        27    11      25\n6 Student306 3I    Female Malay        31    16      16\n\n\n\n\n\n\n\n10.3.3 One-sample test: gghistostats() method\nIn the code chunk below, gghistostats() is used to to build an visual of one-sample test on English scores.\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\nDefault information:\n- statistical details\n- Bayes Factor\n- sample sizes\n- distribution summary"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#references",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#references",
    "title": "10 Visual Statistical Analysis",
    "section": "10.4 References",
    "text": "10.4 References\n\nKam, T.S. (2023). Visual Statistical Analysis\nhttps://www.statisticshowto.com/bayes-factor-definition/"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#visualising-models",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#visualising-models",
    "title": "10 Visual Statistical Analysis",
    "section": "10.3 Visualising Models",
    "text": "10.3 Visualising Models\nIn this section, we will learn how to visualise model diagnostic and model parameters by using parameters package.\nToyota Corolla case study will be used. The purpose of study is to build a model to discover factors affecting prices of used-cars by taking into consideration a set of explanatory variables.\n\n10.3.1 Getting Started\n\nInstalling and loading the required libraries\n\npacman::p_load(readxl, performance, parameters, see)\n\n\n\nImporting Excel file: readxl methods\n\nImportView\n\n\nIn the code chunk below, read_xls() of readxl package is used to import the data worksheet of ToyotaCorolla.xls workbook into R.\n\ncar_resale &lt;- read_xls(\"data/ToyotaCorolla.xls\", \n                       \"data\")\n\n\n\n\n\nCode\ncar_resale\n\n\n# A tibble: 1,436 × 38\n      Id Model    Price Age_08_04 Mfg_Month Mfg_Year     KM Quarterly_Tax Weight\n   &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;\n 1    81 TOYOTA … 18950        25         8     2002  20019           100   1180\n 2     1 TOYOTA … 13500        23        10     2002  46986           210   1165\n 3     2 TOYOTA … 13750        23        10     2002  72937           210   1165\n 4     3  TOYOTA… 13950        24         9     2002  41711           210   1165\n 5     4 TOYOTA … 14950        26         7     2002  48000           210   1165\n 6     5 TOYOTA … 13750        30         3     2002  38500           210   1170\n 7     6 TOYOTA … 12950        32         1     2002  61000           210   1170\n 8     7  TOYOTA… 16900        27         6     2002  94612           210   1245\n 9     8 TOYOTA … 18600        30         3     2002  75889           210   1245\n10    44 TOYOTA … 16950        27         6     2002 110404           234   1255\n# ℹ 1,426 more rows\n# ℹ 29 more variables: Guarantee_Period &lt;dbl&gt;, HP_Bin &lt;chr&gt;, CC_bin &lt;chr&gt;,\n#   Doors &lt;dbl&gt;, Gears &lt;dbl&gt;, Cylinders &lt;dbl&gt;, Fuel_Type &lt;chr&gt;, Color &lt;chr&gt;,\n#   Met_Color &lt;dbl&gt;, Automatic &lt;dbl&gt;, Mfr_Guarantee &lt;dbl&gt;,\n#   BOVAG_Guarantee &lt;dbl&gt;, ABS &lt;dbl&gt;, Airbag_1 &lt;dbl&gt;, Airbag_2 &lt;dbl&gt;,\n#   Airco &lt;dbl&gt;, Automatic_airco &lt;dbl&gt;, Boardcomputer &lt;dbl&gt;, CD_Player &lt;dbl&gt;,\n#   Central_Lock &lt;dbl&gt;, Powered_Windows &lt;dbl&gt;, Power_Steering &lt;dbl&gt;, …\n\n\n\n\n\n\n\n\nTip\n\n\n\nNotice that the output object car_resale is a tibble data frame."
  }
]